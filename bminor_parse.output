Terminals unused in grammar

   TOKEN_EOF
   WHILE
   INTERNAL_ERR
   SCAN_ERR


Grammar

    0 $accept: program $end

    1 program: maybe_decls

    2 maybe_decls: %empty
    3            | decl maybe_decls

    4 decl: IDENT COLON type S_COL
    5     | IDENT COLON type ASGN expr S_COL
    6     | IDENT COLON type ASGN L_BRC maybe_stmts R_BRC

    7 type: INTEGER
    8     | STRING
    9     | CHAR
   10     | BOOLEAN
   11     | VOID
   12     | ARRAY L_BRK expr R_BRK type
   13     | FUNCTION type L_PAR maybe_param_list R_PAR

   14 maybe_param_list: %empty
   15                 | param_list

   16 param_list: IDENT COLON param_type
   17           | IDENT COLON param_type COMMA param_list

   18 param_type: type
   19           | ARRAY L_BRK R_BRK param_type

   20 stmt: non_right_recursive_stmt
   21     | if_stmt
   22     | for_stmt
   23     | decl

   24 non_right_recursive_stmt: expr S_COL
   25                         | L_BRC maybe_stmts R_BRC
   26                         | PRINT maybe_expr_comma_list S_COL
   27                         | RETURN maybe_expr S_COL

   28 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   29        | IF L_PAR expr R_PAR stmt

   30 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt

   32 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

   33 non_dangling_stmt: non_right_recursive_stmt
   34                  | non_dangling_for
   35                  | non_dangling_if

   36 maybe_stmts: %empty
   37            | stmt maybe_stmts

   38 expr: expr10

   39 expr10: expr9 ASGN expr10
   40       | expr9

   41 expr9: expr9 OR expr8
   42      | expr8

   43 expr8: expr8 AND expr7
   44      | expr7

   45 expr7: expr7 LT expr6
   46      | expr7 LT_EQ expr6
   47      | expr7 GT expr6
   48      | expr7 GT_EQ expr6
   49      | expr7 EQ expr6
   50      | expr7 NOT_EQ expr6
   51      | expr6

   52 expr6: expr6 PLUS expr5
   53      | expr6 MINUS expr5
   54      | expr5

   55 expr5: expr5 STAR expr4
   56      | expr5 SLASH expr4
   57      | expr5 PRCT expr4
   58      | expr4

   59 expr4: expr4 CARET expr3
   60      | expr3

   61 expr3: PLUS expr3
   62      | MINUS expr3
   63      | NOT expr3
   64      | expr2

   65 expr2: expr2 DEC
   66      | expr2 INC
   67      | expr1

   68 expr1: L_PAR expr R_PAR
   69      | expr1 L_BRK expr R_BRK
   70      | func_call
   71      | atom

   72 atom: IDENT
   73     | STR_LIT
   74     | INT_LIT
   75     | CHAR_LIT
   76     | TRUE
   77     | FALSE
   78     | arr_lit

   79 func_call: IDENT L_PAR maybe_expr_comma_list R_PAR

   80 arr_lit: L_BRC expr_comma_list R_BRC

   81 maybe_expr_comma_list: %empty
   82                      | expr_comma_list

   83 expr_comma_list: expr
   84                | expr COMMA expr_comma_list

   85 maybe_expr: %empty
   86           | expr


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258)
ARRAY (259) 12 19
BOOLEAN (260) 10
CHAR (261) 9
ELSE (262) 28 30
FALSE (263) 77
FOR (264) 31 32
FUNCTION (265) 13
IF (266) 28 29 30
INTEGER (267) 7
PRINT (268) 26
RETURN (269) 27
STRING (270) 8
TRUE (271) 76
VOID (272) 11
WHILE (273)
L_PAR (274) 13 28 29 30 31 32 68 79
R_PAR (275) 13 28 29 30 31 32 68 79
L_BRK (276) 12 19 69
R_BRK (277) 12 19 69
L_BRC (278) 6 25 80
R_BRC (279) 6 25 80
INC (280) 66
DEC (281) 65
MINUS (282) 53 62
NOT (283) 63
CARET (284) 59
STAR (285) 55
SLASH (286) 56
PRCT (287) 57
PLUS (288) 52 61
LT_EQ (289) 46
LT (290) 45
GT_EQ (291) 48
GT (292) 47
EQ (293) 49
NOT_EQ (294) 50
AND (295) 43
OR (296) 41
ASGN (297) 5 6 39
COLON (298) 4 5 6 16 17
S_COL (299) 4 5 24 26 27 31 32
COMMA (300) 17 84
IDENT (301) 4 5 6 16 17 72 79
STR_LIT (302) 73
INT_LIT (303) 74
CHAR_LIT (304) 75
INTERNAL_ERR (305)
SCAN_ERR (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
maybe_decls (54)
    on left: 2 3, on right: 1 3
decl (55)
    on left: 4 5 6, on right: 3 23
type (56)
    on left: 7 8 9 10 11 12 13, on right: 4 5 6 12 13 18
maybe_param_list (57)
    on left: 14 15, on right: 13
param_list (58)
    on left: 16 17, on right: 15 17
param_type (59)
    on left: 18 19, on right: 16 17 19
stmt (60)
    on left: 20 21 22 23, on right: 28 29 31 37
non_right_recursive_stmt (61)
    on left: 24 25 26 27, on right: 20 33
if_stmt (62)
    on left: 28 29, on right: 21
non_dangling_if (63)
    on left: 30, on right: 35
for_stmt (64)
    on left: 31, on right: 22
non_dangling_for (65)
    on left: 32, on right: 34
non_dangling_stmt (66)
    on left: 33 34 35, on right: 28 30 32
maybe_stmts (67)
    on left: 36 37, on right: 6 25 37
expr (68)
    on left: 38, on right: 5 12 24 28 29 30 68 69 83 84 86
expr10 (69)
    on left: 39 40, on right: 38 39
expr9 (70)
    on left: 41 42, on right: 39 40 41
expr8 (71)
    on left: 43 44, on right: 41 42 43
expr7 (72)
    on left: 45 46 47 48 49 50 51, on right: 43 44 45 46 47 48 49 50
expr6 (73)
    on left: 52 53 54, on right: 45 46 47 48 49 50 51 52 53
expr5 (74)
    on left: 55 56 57 58, on right: 52 53 54 55 56 57
expr4 (75)
    on left: 59 60, on right: 55 56 57 58 59
expr3 (76)
    on left: 61 62 63 64, on right: 59 60 61 62 63
expr2 (77)
    on left: 65 66 67, on right: 64 65 66
expr1 (78)
    on left: 68 69 70 71, on right: 67 69
atom (79)
    on left: 72 73 74 75 76 77 78, on right: 71
func_call (80)
    on left: 79, on right: 70
arr_lit (81)
    on left: 80, on right: 78
maybe_expr_comma_list (82)
    on left: 81 82, on right: 26 79
expr_comma_list (83)
    on left: 83 84, on right: 80 82 84
maybe_expr (84)
    on left: 85 86, on right: 27 31 32


State 0

    0 $accept: . program $end

    IDENT  shift, and go to state 1

    $default  reduce using rule 2 (maybe_decls)

    program      go to state 2
    maybe_decls  go to state 3
    decl         go to state 4


State 1

    4 decl: IDENT . COLON type S_COL
    5     | IDENT . COLON type ASGN expr S_COL
    6     | IDENT . COLON type ASGN L_BRC maybe_stmts R_BRC

    COLON  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: maybe_decls .

    $default  reduce using rule 1 (program)


State 4

    3 maybe_decls: decl . maybe_decls

    IDENT  shift, and go to state 1

    $default  reduce using rule 2 (maybe_decls)

    maybe_decls  go to state 7
    decl         go to state 4


State 5

    4 decl: IDENT COLON . type S_COL
    5     | IDENT COLON . type ASGN expr S_COL
    6     | IDENT COLON . type ASGN L_BRC maybe_stmts R_BRC

    ARRAY     shift, and go to state 8
    BOOLEAN   shift, and go to state 9
    CHAR      shift, and go to state 10
    FUNCTION  shift, and go to state 11
    INTEGER   shift, and go to state 12
    STRING    shift, and go to state 13
    VOID      shift, and go to state 14

    type  go to state 15


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 maybe_decls: decl maybe_decls .

    $default  reduce using rule 3 (maybe_decls)


State 8

   12 type: ARRAY . L_BRK expr R_BRK type

    L_BRK  shift, and go to state 16


State 9

   10 type: BOOLEAN .

    $default  reduce using rule 10 (type)


State 10

    9 type: CHAR .

    $default  reduce using rule 9 (type)


State 11

   13 type: FUNCTION . type L_PAR maybe_param_list R_PAR

    ARRAY     shift, and go to state 8
    BOOLEAN   shift, and go to state 9
    CHAR      shift, and go to state 10
    FUNCTION  shift, and go to state 11
    INTEGER   shift, and go to state 12
    STRING    shift, and go to state 13
    VOID      shift, and go to state 14

    type  go to state 17


State 12

    7 type: INTEGER .

    $default  reduce using rule 7 (type)


State 13

    8 type: STRING .

    $default  reduce using rule 8 (type)


State 14

   11 type: VOID .

    $default  reduce using rule 11 (type)


State 15

    4 decl: IDENT COLON type . S_COL
    5     | IDENT COLON type . ASGN expr S_COL
    6     | IDENT COLON type . ASGN L_BRC maybe_stmts R_BRC

    ASGN   shift, and go to state 18
    S_COL  shift, and go to state 19


State 16

   12 type: ARRAY L_BRK . expr R_BRK type

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr       go to state 31
    expr10     go to state 32
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 17

   13 type: FUNCTION type . L_PAR maybe_param_list R_PAR

    L_PAR  shift, and go to state 45


State 18

    5 decl: IDENT COLON type ASGN . expr S_COL
    6     | IDENT COLON type ASGN . L_BRC maybe_stmts R_BRC

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 46
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr       go to state 47
    expr10     go to state 32
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 19

    4 decl: IDENT COLON type S_COL .

    $default  reduce using rule 4 (decl)


State 20

   77 atom: FALSE .

    $default  reduce using rule 77 (atom)


State 21

   76 atom: TRUE .

    $default  reduce using rule 76 (atom)


State 22

   68 expr1: L_PAR . expr R_PAR

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr       go to state 48
    expr10     go to state 32
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 23

   80 arr_lit: L_BRC . expr_comma_list R_BRC

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr             go to state 49
    expr10           go to state 32
    expr9            go to state 33
    expr8            go to state 34
    expr7            go to state 35
    expr6            go to state 36
    expr5            go to state 37
    expr4            go to state 38
    expr3            go to state 39
    expr2            go to state 40
    expr1            go to state 41
    atom             go to state 42
    func_call        go to state 43
    arr_lit          go to state 44
    expr_comma_list  go to state 50


State 24

   62 expr3: MINUS . expr3

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr3      go to state 51
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 25

   63 expr3: NOT . expr3

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr3      go to state 52
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 26

   61 expr3: PLUS . expr3

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr3      go to state 53
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 27

   72 atom: IDENT .
   79 func_call: IDENT . L_PAR maybe_expr_comma_list R_PAR

    L_PAR  shift, and go to state 54

    $default  reduce using rule 72 (atom)


State 28

   73 atom: STR_LIT .

    $default  reduce using rule 73 (atom)


State 29

   74 atom: INT_LIT .

    $default  reduce using rule 74 (atom)


State 30

   75 atom: CHAR_LIT .

    $default  reduce using rule 75 (atom)


State 31

   12 type: ARRAY L_BRK expr . R_BRK type

    R_BRK  shift, and go to state 55


State 32

   38 expr: expr10 .

    $default  reduce using rule 38 (expr)


State 33

   39 expr10: expr9 . ASGN expr10
   40       | expr9 .
   41 expr9: expr9 . OR expr8

    OR    shift, and go to state 56
    ASGN  shift, and go to state 57

    $default  reduce using rule 40 (expr10)


State 34

   42 expr9: expr8 .
   43 expr8: expr8 . AND expr7

    AND  shift, and go to state 58

    $default  reduce using rule 42 (expr9)


State 35

   44 expr8: expr7 .
   45 expr7: expr7 . LT expr6
   46      | expr7 . LT_EQ expr6
   47      | expr7 . GT expr6
   48      | expr7 . GT_EQ expr6
   49      | expr7 . EQ expr6
   50      | expr7 . NOT_EQ expr6

    LT_EQ   shift, and go to state 59
    LT      shift, and go to state 60
    GT_EQ   shift, and go to state 61
    GT      shift, and go to state 62
    EQ      shift, and go to state 63
    NOT_EQ  shift, and go to state 64

    $default  reduce using rule 44 (expr8)


State 36

   51 expr7: expr6 .
   52 expr6: expr6 . PLUS expr5
   53      | expr6 . MINUS expr5

    MINUS  shift, and go to state 65
    PLUS   shift, and go to state 66

    $default  reduce using rule 51 (expr7)


State 37

   54 expr6: expr5 .
   55 expr5: expr5 . STAR expr4
   56      | expr5 . SLASH expr4
   57      | expr5 . PRCT expr4

    STAR   shift, and go to state 67
    SLASH  shift, and go to state 68
    PRCT   shift, and go to state 69

    $default  reduce using rule 54 (expr6)


State 38

   58 expr5: expr4 .
   59 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 70

    $default  reduce using rule 58 (expr5)


State 39

   60 expr4: expr3 .

    $default  reduce using rule 60 (expr4)


State 40

   64 expr3: expr2 .
   65 expr2: expr2 . DEC
   66      | expr2 . INC

    INC  shift, and go to state 71
    DEC  shift, and go to state 72

    $default  reduce using rule 64 (expr3)


State 41

   67 expr2: expr1 .
   69 expr1: expr1 . L_BRK expr R_BRK

    L_BRK  shift, and go to state 73

    $default  reduce using rule 67 (expr2)


State 42

   71 expr1: atom .

    $default  reduce using rule 71 (expr1)


State 43

   70 expr1: func_call .

    $default  reduce using rule 70 (expr1)


State 44

   78 atom: arr_lit .

    $default  reduce using rule 78 (atom)


State 45

   13 type: FUNCTION type L_PAR . maybe_param_list R_PAR

    IDENT  shift, and go to state 74

    $default  reduce using rule 14 (maybe_param_list)

    maybe_param_list  go to state 75
    param_list        go to state 76


State 46

    6 decl: IDENT COLON type ASGN L_BRC . maybe_stmts R_BRC
   80 arr_lit: L_BRC . expr_comma_list R_BRC

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 77
    IF        shift, and go to state 78
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 36 (maybe_stmts)

    decl                      go to state 83
    stmt                      go to state 84
    non_right_recursive_stmt  go to state 85
    if_stmt                   go to state 86
    for_stmt                  go to state 87
    maybe_stmts               go to state 88
    expr                      go to state 89
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44
    expr_comma_list           go to state 50


State 47

    5 decl: IDENT COLON type ASGN expr . S_COL

    S_COL  shift, and go to state 90


State 48

   68 expr1: L_PAR expr . R_PAR

    R_PAR  shift, and go to state 91


State 49

   83 expr_comma_list: expr .
   84                | expr . COMMA expr_comma_list

    COMMA  shift, and go to state 92

    $default  reduce using rule 83 (expr_comma_list)


State 50

   80 arr_lit: L_BRC expr_comma_list . R_BRC

    R_BRC  shift, and go to state 93


State 51

   62 expr3: MINUS expr3 .

    $default  reduce using rule 62 (expr3)


State 52

   63 expr3: NOT expr3 .

    $default  reduce using rule 63 (expr3)


State 53

   61 expr3: PLUS expr3 .

    $default  reduce using rule 61 (expr3)


State 54

   79 func_call: IDENT L_PAR . maybe_expr_comma_list R_PAR

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 81 (maybe_expr_comma_list)

    expr                   go to state 49
    expr10                 go to state 32
    expr9                  go to state 33
    expr8                  go to state 34
    expr7                  go to state 35
    expr6                  go to state 36
    expr5                  go to state 37
    expr4                  go to state 38
    expr3                  go to state 39
    expr2                  go to state 40
    expr1                  go to state 41
    atom                   go to state 42
    func_call              go to state 43
    arr_lit                go to state 44
    maybe_expr_comma_list  go to state 94
    expr_comma_list        go to state 95


State 55

   12 type: ARRAY L_BRK expr R_BRK . type

    ARRAY     shift, and go to state 8
    BOOLEAN   shift, and go to state 9
    CHAR      shift, and go to state 10
    FUNCTION  shift, and go to state 11
    INTEGER   shift, and go to state 12
    STRING    shift, and go to state 13
    VOID      shift, and go to state 14

    type  go to state 96


State 56

   41 expr9: expr9 OR . expr8

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr8      go to state 97
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 57

   39 expr10: expr9 ASGN . expr10

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr10     go to state 98
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 58

   43 expr8: expr8 AND . expr7

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr7      go to state 99
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 59

   46 expr7: expr7 LT_EQ . expr6

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr6      go to state 100
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 60

   45 expr7: expr7 LT . expr6

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr6      go to state 101
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 61

   48 expr7: expr7 GT_EQ . expr6

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr6      go to state 102
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 62

   47 expr7: expr7 GT . expr6

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr6      go to state 103
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 63

   49 expr7: expr7 EQ . expr6

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr6      go to state 104
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 64

   50 expr7: expr7 NOT_EQ . expr6

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr6      go to state 105
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 65

   53 expr6: expr6 MINUS . expr5

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr5      go to state 106
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 66

   52 expr6: expr6 PLUS . expr5

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr5      go to state 107
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 67

   55 expr5: expr5 STAR . expr4

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr4      go to state 108
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 68

   56 expr5: expr5 SLASH . expr4

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr4      go to state 109
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 69

   57 expr5: expr5 PRCT . expr4

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr4      go to state 110
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 70

   59 expr4: expr4 CARET . expr3

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr3      go to state 111
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 71

   66 expr2: expr2 INC .

    $default  reduce using rule 66 (expr2)


State 72

   65 expr2: expr2 DEC .

    $default  reduce using rule 65 (expr2)


State 73

   69 expr1: expr1 L_BRK . expr R_BRK

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr       go to state 112
    expr10     go to state 32
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 74

   16 param_list: IDENT . COLON param_type
   17           | IDENT . COLON param_type COMMA param_list

    COLON  shift, and go to state 113


State 75

   13 type: FUNCTION type L_PAR maybe_param_list . R_PAR

    R_PAR  shift, and go to state 114


State 76

   15 maybe_param_list: param_list .

    $default  reduce using rule 15 (maybe_param_list)


State 77

   31 for_stmt: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt

    L_PAR  shift, and go to state 115


State 78

   28 if_stmt: IF . L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   29        | IF . L_PAR expr R_PAR stmt

    L_PAR  shift, and go to state 116


State 79

   26 non_right_recursive_stmt: PRINT . maybe_expr_comma_list S_COL

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 81 (maybe_expr_comma_list)

    expr                   go to state 49
    expr10                 go to state 32
    expr9                  go to state 33
    expr8                  go to state 34
    expr7                  go to state 35
    expr6                  go to state 36
    expr5                  go to state 37
    expr4                  go to state 38
    expr3                  go to state 39
    expr2                  go to state 40
    expr1                  go to state 41
    atom                   go to state 42
    func_call              go to state 43
    arr_lit                go to state 44
    maybe_expr_comma_list  go to state 117
    expr_comma_list        go to state 95


State 80

   27 non_right_recursive_stmt: RETURN . maybe_expr S_COL

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 85 (maybe_expr)

    expr        go to state 118
    expr10      go to state 32
    expr9       go to state 33
    expr8       go to state 34
    expr7       go to state 35
    expr6       go to state 36
    expr5       go to state 37
    expr4       go to state 38
    expr3       go to state 39
    expr2       go to state 40
    expr1       go to state 41
    atom        go to state 42
    func_call   go to state 43
    arr_lit     go to state 44
    maybe_expr  go to state 119


State 81

   25 non_right_recursive_stmt: L_BRC . maybe_stmts R_BRC
   80 arr_lit: L_BRC . expr_comma_list R_BRC

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 77
    IF        shift, and go to state 78
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 36 (maybe_stmts)

    decl                      go to state 83
    stmt                      go to state 84
    non_right_recursive_stmt  go to state 85
    if_stmt                   go to state 86
    for_stmt                  go to state 87
    maybe_stmts               go to state 120
    expr                      go to state 89
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44
    expr_comma_list           go to state 50


State 82

    4 decl: IDENT . COLON type S_COL
    5     | IDENT . COLON type ASGN expr S_COL
    6     | IDENT . COLON type ASGN L_BRC maybe_stmts R_BRC
   72 atom: IDENT .
   79 func_call: IDENT . L_PAR maybe_expr_comma_list R_PAR

    L_PAR  shift, and go to state 54
    COLON  shift, and go to state 5

    $default  reduce using rule 72 (atom)


State 83

   23 stmt: decl .

    $default  reduce using rule 23 (stmt)


State 84

   37 maybe_stmts: stmt . maybe_stmts

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 77
    IF        shift, and go to state 78
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 36 (maybe_stmts)

    decl                      go to state 83
    stmt                      go to state 84
    non_right_recursive_stmt  go to state 85
    if_stmt                   go to state 86
    for_stmt                  go to state 87
    maybe_stmts               go to state 121
    expr                      go to state 122
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44


State 85

   20 stmt: non_right_recursive_stmt .

    $default  reduce using rule 20 (stmt)


State 86

   21 stmt: if_stmt .

    $default  reduce using rule 21 (stmt)


State 87

   22 stmt: for_stmt .

    $default  reduce using rule 22 (stmt)


State 88

    6 decl: IDENT COLON type ASGN L_BRC maybe_stmts . R_BRC

    R_BRC  shift, and go to state 123


State 89

   24 non_right_recursive_stmt: expr . S_COL
   83 expr_comma_list: expr .
   84                | expr . COMMA expr_comma_list

    S_COL  shift, and go to state 124
    COMMA  shift, and go to state 92

    $default  reduce using rule 83 (expr_comma_list)


State 90

    5 decl: IDENT COLON type ASGN expr S_COL .

    $default  reduce using rule 5 (decl)


State 91

   68 expr1: L_PAR expr R_PAR .

    $default  reduce using rule 68 (expr1)


State 92

   84 expr_comma_list: expr COMMA . expr_comma_list

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr             go to state 49
    expr10           go to state 32
    expr9            go to state 33
    expr8            go to state 34
    expr7            go to state 35
    expr6            go to state 36
    expr5            go to state 37
    expr4            go to state 38
    expr3            go to state 39
    expr2            go to state 40
    expr1            go to state 41
    atom             go to state 42
    func_call        go to state 43
    arr_lit          go to state 44
    expr_comma_list  go to state 125


State 93

   80 arr_lit: L_BRC expr_comma_list R_BRC .

    $default  reduce using rule 80 (arr_lit)


State 94

   79 func_call: IDENT L_PAR maybe_expr_comma_list . R_PAR

    R_PAR  shift, and go to state 126


State 95

   82 maybe_expr_comma_list: expr_comma_list .

    $default  reduce using rule 82 (maybe_expr_comma_list)


State 96

   12 type: ARRAY L_BRK expr R_BRK type .

    $default  reduce using rule 12 (type)


State 97

   41 expr9: expr9 OR expr8 .
   43 expr8: expr8 . AND expr7

    AND  shift, and go to state 58

    $default  reduce using rule 41 (expr9)


State 98

   39 expr10: expr9 ASGN expr10 .

    $default  reduce using rule 39 (expr10)


State 99

   43 expr8: expr8 AND expr7 .
   45 expr7: expr7 . LT expr6
   46      | expr7 . LT_EQ expr6
   47      | expr7 . GT expr6
   48      | expr7 . GT_EQ expr6
   49      | expr7 . EQ expr6
   50      | expr7 . NOT_EQ expr6

    LT_EQ   shift, and go to state 59
    LT      shift, and go to state 60
    GT_EQ   shift, and go to state 61
    GT      shift, and go to state 62
    EQ      shift, and go to state 63
    NOT_EQ  shift, and go to state 64

    $default  reduce using rule 43 (expr8)


State 100

   46 expr7: expr7 LT_EQ expr6 .
   52 expr6: expr6 . PLUS expr5
   53      | expr6 . MINUS expr5

    MINUS  shift, and go to state 65
    PLUS   shift, and go to state 66

    $default  reduce using rule 46 (expr7)


State 101

   45 expr7: expr7 LT expr6 .
   52 expr6: expr6 . PLUS expr5
   53      | expr6 . MINUS expr5

    MINUS  shift, and go to state 65
    PLUS   shift, and go to state 66

    $default  reduce using rule 45 (expr7)


State 102

   48 expr7: expr7 GT_EQ expr6 .
   52 expr6: expr6 . PLUS expr5
   53      | expr6 . MINUS expr5

    MINUS  shift, and go to state 65
    PLUS   shift, and go to state 66

    $default  reduce using rule 48 (expr7)


State 103

   47 expr7: expr7 GT expr6 .
   52 expr6: expr6 . PLUS expr5
   53      | expr6 . MINUS expr5

    MINUS  shift, and go to state 65
    PLUS   shift, and go to state 66

    $default  reduce using rule 47 (expr7)


State 104

   49 expr7: expr7 EQ expr6 .
   52 expr6: expr6 . PLUS expr5
   53      | expr6 . MINUS expr5

    MINUS  shift, and go to state 65
    PLUS   shift, and go to state 66

    $default  reduce using rule 49 (expr7)


State 105

   50 expr7: expr7 NOT_EQ expr6 .
   52 expr6: expr6 . PLUS expr5
   53      | expr6 . MINUS expr5

    MINUS  shift, and go to state 65
    PLUS   shift, and go to state 66

    $default  reduce using rule 50 (expr7)


State 106

   53 expr6: expr6 MINUS expr5 .
   55 expr5: expr5 . STAR expr4
   56      | expr5 . SLASH expr4
   57      | expr5 . PRCT expr4

    STAR   shift, and go to state 67
    SLASH  shift, and go to state 68
    PRCT   shift, and go to state 69

    $default  reduce using rule 53 (expr6)


State 107

   52 expr6: expr6 PLUS expr5 .
   55 expr5: expr5 . STAR expr4
   56      | expr5 . SLASH expr4
   57      | expr5 . PRCT expr4

    STAR   shift, and go to state 67
    SLASH  shift, and go to state 68
    PRCT   shift, and go to state 69

    $default  reduce using rule 52 (expr6)


State 108

   55 expr5: expr5 STAR expr4 .
   59 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 70

    $default  reduce using rule 55 (expr5)


State 109

   56 expr5: expr5 SLASH expr4 .
   59 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 70

    $default  reduce using rule 56 (expr5)


State 110

   57 expr5: expr5 PRCT expr4 .
   59 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 70

    $default  reduce using rule 57 (expr5)


State 111

   59 expr4: expr4 CARET expr3 .

    $default  reduce using rule 59 (expr4)


State 112

   69 expr1: expr1 L_BRK expr . R_BRK

    R_BRK  shift, and go to state 127


State 113

   16 param_list: IDENT COLON . param_type
   17           | IDENT COLON . param_type COMMA param_list

    ARRAY     shift, and go to state 128
    BOOLEAN   shift, and go to state 9
    CHAR      shift, and go to state 10
    FUNCTION  shift, and go to state 11
    INTEGER   shift, and go to state 12
    STRING    shift, and go to state 13
    VOID      shift, and go to state 14

    type        go to state 129
    param_type  go to state 130


State 114

   13 type: FUNCTION type L_PAR maybe_param_list R_PAR .

    $default  reduce using rule 13 (type)


State 115

   31 for_stmt: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 85 (maybe_expr)

    expr        go to state 118
    expr10      go to state 32
    expr9       go to state 33
    expr8       go to state 34
    expr7       go to state 35
    expr6       go to state 36
    expr5       go to state 37
    expr4       go to state 38
    expr3       go to state 39
    expr2       go to state 40
    expr1       go to state 41
    atom        go to state 42
    func_call   go to state 43
    arr_lit     go to state 44
    maybe_expr  go to state 131


State 116

   28 if_stmt: IF L_PAR . expr R_PAR non_dangling_stmt ELSE stmt
   29        | IF L_PAR . expr R_PAR stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr       go to state 132
    expr10     go to state 32
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 117

   26 non_right_recursive_stmt: PRINT maybe_expr_comma_list . S_COL

    S_COL  shift, and go to state 133


State 118

   86 maybe_expr: expr .

    $default  reduce using rule 86 (maybe_expr)


State 119

   27 non_right_recursive_stmt: RETURN maybe_expr . S_COL

    S_COL  shift, and go to state 134


State 120

   25 non_right_recursive_stmt: L_BRC maybe_stmts . R_BRC

    R_BRC  shift, and go to state 135


State 121

   37 maybe_stmts: stmt maybe_stmts .

    $default  reduce using rule 37 (maybe_stmts)


State 122

   24 non_right_recursive_stmt: expr . S_COL

    S_COL  shift, and go to state 124


State 123

    6 decl: IDENT COLON type ASGN L_BRC maybe_stmts R_BRC .

    $default  reduce using rule 6 (decl)


State 124

   24 non_right_recursive_stmt: expr S_COL .

    $default  reduce using rule 24 (non_right_recursive_stmt)


State 125

   84 expr_comma_list: expr COMMA expr_comma_list .

    $default  reduce using rule 84 (expr_comma_list)


State 126

   79 func_call: IDENT L_PAR maybe_expr_comma_list R_PAR .

    $default  reduce using rule 79 (func_call)


State 127

   69 expr1: expr1 L_BRK expr R_BRK .

    $default  reduce using rule 69 (expr1)


State 128

   12 type: ARRAY . L_BRK expr R_BRK type
   19 param_type: ARRAY . L_BRK R_BRK param_type

    L_BRK  shift, and go to state 136


State 129

   18 param_type: type .

    $default  reduce using rule 18 (param_type)


State 130

   16 param_list: IDENT COLON param_type .
   17           | IDENT COLON param_type . COMMA param_list

    COMMA  shift, and go to state 137

    $default  reduce using rule 16 (param_list)


State 131

   31 for_stmt: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR stmt

    S_COL  shift, and go to state 138


State 132

   28 if_stmt: IF L_PAR expr . R_PAR non_dangling_stmt ELSE stmt
   29        | IF L_PAR expr . R_PAR stmt

    R_PAR  shift, and go to state 139


State 133

   26 non_right_recursive_stmt: PRINT maybe_expr_comma_list S_COL .

    $default  reduce using rule 26 (non_right_recursive_stmt)


State 134

   27 non_right_recursive_stmt: RETURN maybe_expr S_COL .

    $default  reduce using rule 27 (non_right_recursive_stmt)


State 135

   25 non_right_recursive_stmt: L_BRC maybe_stmts R_BRC .

    $default  reduce using rule 25 (non_right_recursive_stmt)


State 136

   12 type: ARRAY L_BRK . expr R_BRK type
   19 param_type: ARRAY L_BRK . R_BRK param_type

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    R_BRK     shift, and go to state 140
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr       go to state 31
    expr10     go to state 32
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 137

   17 param_list: IDENT COLON param_type COMMA . param_list

    IDENT  shift, and go to state 74

    param_list  go to state 141


State 138

   31 for_stmt: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 85 (maybe_expr)

    expr        go to state 118
    expr10      go to state 32
    expr9       go to state 33
    expr8       go to state 34
    expr7       go to state 35
    expr6       go to state 36
    expr5       go to state 37
    expr4       go to state 38
    expr3       go to state 39
    expr2       go to state 40
    expr1       go to state 41
    atom        go to state 42
    func_call   go to state 43
    arr_lit     go to state 44
    maybe_expr  go to state 142


State 139

   28 if_stmt: IF L_PAR expr R_PAR . non_dangling_stmt ELSE stmt
   29        | IF L_PAR expr R_PAR . stmt

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 143
    IF        shift, and go to state 144
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    decl                      go to state 83
    stmt                      go to state 145
    non_right_recursive_stmt  go to state 146
    if_stmt                   go to state 86
    non_dangling_if           go to state 147
    for_stmt                  go to state 87
    non_dangling_for          go to state 148
    non_dangling_stmt         go to state 149
    expr                      go to state 122
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44


State 140

   19 param_type: ARRAY L_BRK R_BRK . param_type

    ARRAY     shift, and go to state 128
    BOOLEAN   shift, and go to state 9
    CHAR      shift, and go to state 10
    FUNCTION  shift, and go to state 11
    INTEGER   shift, and go to state 12
    STRING    shift, and go to state 13
    VOID      shift, and go to state 14

    type        go to state 129
    param_type  go to state 150


State 141

   17 param_list: IDENT COLON param_type COMMA param_list .

    $default  reduce using rule 17 (param_list)


State 142

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR stmt

    S_COL  shift, and go to state 151


State 143

   31 for_stmt: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   32 non_dangling_for: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    L_PAR  shift, and go to state 152


State 144

   28 if_stmt: IF . L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   29        | IF . L_PAR expr R_PAR stmt
   30 non_dangling_if: IF . L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

    L_PAR  shift, and go to state 153


State 145

   29 if_stmt: IF L_PAR expr R_PAR stmt .

    $default  reduce using rule 29 (if_stmt)


State 146

   20 stmt: non_right_recursive_stmt .
   33 non_dangling_stmt: non_right_recursive_stmt .

    ELSE      reduce using rule 33 (non_dangling_stmt)
    $default  reduce using rule 20 (stmt)


State 147

   35 non_dangling_stmt: non_dangling_if .

    $default  reduce using rule 35 (non_dangling_stmt)


State 148

   34 non_dangling_stmt: non_dangling_for .

    $default  reduce using rule 34 (non_dangling_stmt)


State 149

   28 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt . ELSE stmt

    ELSE  shift, and go to state 154


State 150

   19 param_type: ARRAY L_BRK R_BRK param_type .

    $default  reduce using rule 19 (param_type)


State 151

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 85 (maybe_expr)

    expr        go to state 118
    expr10      go to state 32
    expr9       go to state 33
    expr8       go to state 34
    expr7       go to state 35
    expr6       go to state 36
    expr5       go to state 37
    expr4       go to state 38
    expr3       go to state 39
    expr2       go to state 40
    expr1       go to state 41
    atom        go to state 42
    func_call   go to state 43
    arr_lit     go to state 44
    maybe_expr  go to state 155


State 152

   31 for_stmt: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   32 non_dangling_for: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 85 (maybe_expr)

    expr        go to state 118
    expr10      go to state 32
    expr9       go to state 33
    expr8       go to state 34
    expr7       go to state 35
    expr6       go to state 36
    expr5       go to state 37
    expr4       go to state 38
    expr3       go to state 39
    expr2       go to state 40
    expr1       go to state 41
    atom        go to state 42
    func_call   go to state 43
    arr_lit     go to state 44
    maybe_expr  go to state 156


State 153

   28 if_stmt: IF L_PAR . expr R_PAR non_dangling_stmt ELSE stmt
   29        | IF L_PAR . expr R_PAR stmt
   30 non_dangling_if: IF L_PAR . expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    expr       go to state 157
    expr10     go to state 32
    expr9      go to state 33
    expr8      go to state 34
    expr7      go to state 35
    expr6      go to state 36
    expr5      go to state 37
    expr4      go to state 38
    expr3      go to state 39
    expr2      go to state 40
    expr1      go to state 41
    atom       go to state 42
    func_call  go to state 43
    arr_lit    go to state 44


State 154

   28 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE . stmt

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 77
    IF        shift, and go to state 78
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    decl                      go to state 83
    stmt                      go to state 158
    non_right_recursive_stmt  go to state 85
    if_stmt                   go to state 86
    for_stmt                  go to state 87
    expr                      go to state 122
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44


State 155

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR stmt

    R_PAR  shift, and go to state 159


State 156

   31 for_stmt: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   32 non_dangling_for: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    S_COL  shift, and go to state 160


State 157

   28 if_stmt: IF L_PAR expr . R_PAR non_dangling_stmt ELSE stmt
   29        | IF L_PAR expr . R_PAR stmt
   30 non_dangling_if: IF L_PAR expr . R_PAR non_dangling_stmt ELSE non_dangling_stmt

    R_PAR  shift, and go to state 161


State 158

   28 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE stmt .

    $default  reduce using rule 28 (if_stmt)


State 159

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . stmt

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 77
    IF        shift, and go to state 78
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    decl                      go to state 83
    stmt                      go to state 162
    non_right_recursive_stmt  go to state 85
    if_stmt                   go to state 86
    for_stmt                  go to state 87
    expr                      go to state 122
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44


State 160

   31 for_stmt: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR stmt
   32 non_dangling_for: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 85 (maybe_expr)

    expr        go to state 118
    expr10      go to state 32
    expr9       go to state 33
    expr8       go to state 34
    expr7       go to state 35
    expr6       go to state 36
    expr5       go to state 37
    expr4       go to state 38
    expr3       go to state 39
    expr2       go to state 40
    expr1       go to state 41
    atom        go to state 42
    func_call   go to state 43
    arr_lit     go to state 44
    maybe_expr  go to state 163


State 161

   28 if_stmt: IF L_PAR expr R_PAR . non_dangling_stmt ELSE stmt
   29        | IF L_PAR expr R_PAR . stmt
   30 non_dangling_if: IF L_PAR expr R_PAR . non_dangling_stmt ELSE non_dangling_stmt

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 143
    IF        shift, and go to state 144
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    decl                      go to state 83
    stmt                      go to state 145
    non_right_recursive_stmt  go to state 146
    if_stmt                   go to state 86
    non_dangling_if           go to state 147
    for_stmt                  go to state 87
    non_dangling_for          go to state 148
    non_dangling_stmt         go to state 164
    expr                      go to state 122
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44


State 162

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt .

    $default  reduce using rule 31 (for_stmt)


State 163

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR stmt
   32 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR non_dangling_stmt

    S_COL  shift, and go to state 165


State 164

   28 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt . ELSE stmt
   30 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt . ELSE non_dangling_stmt

    ELSE  shift, and go to state 166


State 165

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR stmt
   32 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR non_dangling_stmt

    FALSE     shift, and go to state 20
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 23
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 27
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    $default  reduce using rule 85 (maybe_expr)

    expr        go to state 118
    expr10      go to state 32
    expr9       go to state 33
    expr8       go to state 34
    expr7       go to state 35
    expr6       go to state 36
    expr5       go to state 37
    expr4       go to state 38
    expr3       go to state 39
    expr2       go to state 40
    expr1       go to state 41
    atom        go to state 42
    func_call   go to state 43
    arr_lit     go to state 44
    maybe_expr  go to state 167


State 166

   28 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE . stmt
   30 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE . non_dangling_stmt

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 143
    IF        shift, and go to state 144
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    decl                      go to state 83
    stmt                      go to state 158
    non_right_recursive_stmt  go to state 146
    if_stmt                   go to state 86
    non_dangling_if           go to state 147
    for_stmt                  go to state 87
    non_dangling_for          go to state 148
    non_dangling_stmt         go to state 168
    expr                      go to state 122
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44


State 167

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR stmt
   32 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR non_dangling_stmt

    R_PAR  shift, and go to state 169


State 168

   30 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt .

    $default  reduce using rule 30 (non_dangling_if)


State 169

   31 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . stmt
   32 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . non_dangling_stmt

    FALSE     shift, and go to state 20
    FOR       shift, and go to state 143
    IF        shift, and go to state 144
    PRINT     shift, and go to state 79
    RETURN    shift, and go to state 80
    TRUE      shift, and go to state 21
    L_PAR     shift, and go to state 22
    L_BRC     shift, and go to state 81
    MINUS     shift, and go to state 24
    NOT       shift, and go to state 25
    PLUS      shift, and go to state 26
    IDENT     shift, and go to state 82
    STR_LIT   shift, and go to state 28
    INT_LIT   shift, and go to state 29
    CHAR_LIT  shift, and go to state 30

    decl                      go to state 83
    stmt                      go to state 162
    non_right_recursive_stmt  go to state 146
    if_stmt                   go to state 86
    non_dangling_if           go to state 147
    for_stmt                  go to state 87
    non_dangling_for          go to state 148
    non_dangling_stmt         go to state 170
    expr                      go to state 122
    expr10                    go to state 32
    expr9                     go to state 33
    expr8                     go to state 34
    expr7                     go to state 35
    expr6                     go to state 36
    expr5                     go to state 37
    expr4                     go to state 38
    expr3                     go to state 39
    expr2                     go to state 40
    expr1                     go to state 41
    atom                      go to state 42
    func_call                 go to state 43
    arr_lit                   go to state 44


State 170

   32 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt .

    $default  reduce using rule 32 (non_dangling_for)
