Terminals unused in grammar

   WHILE
   INTERNAL_ERR
   SCAN_ERR


Grammar

    0 $accept: program $end

    1 program: maybe_decls TOKEN_EOF

    2 decl: IDENT COLON type S_COL
    3     | IDENT COLON type ASGN expr S_COL
    4     | IDENT COLON type ASGN L_BRC maybe_stmts R_BRC

    5 type: INTEGER
    6     | STRING
    7     | CHAR
    8     | BOOLEAN
    9     | VOID
   10     | ARRAY L_BRK R_BRK type
   11     | ARRAY L_BRK expr R_BRK type
   12     | FUNCTION type L_PAR maybe_param_list R_PAR

   13 maybe_param_list: %empty
   14                 | param_list

   15 param_list: IDENT COLON type
   16           | IDENT COLON type COMMA param_list

   17 maybe_decls: %empty
   18            | decl maybe_decls

   19 stmt: non_right_recursive_stmt
   20     | if_stmt
   21     | for_stmt
   22     | decl

   23 non_right_recursive_stmt: expr S_COL
   24                         | L_BRC maybe_stmts R_BRC
   25                         | PRINT maybe_expr_comma_list S_COL
   26                         | RETURN maybe_expr S_COL

   27 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   28        | IF L_PAR expr R_PAR stmt

   29 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt

   31 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

   32 non_dangling_stmt: non_right_recursive_stmt
   33                  | non_dangling_for
   34                  | non_dangling_if

   35 maybe_stmts: %empty
   36            | stmt maybe_stmts

   37 expr: expr10

   38 expr10: expr9 ASGN expr10
   39       | expr9

   40 expr9: expr9 OR expr8
   41      | expr8

   42 expr8: expr8 AND expr7
   43      | expr7

   44 expr7: expr7 LT expr6
   45      | expr7 LT_EQ expr6
   46      | expr7 GT expr6
   47      | expr7 GT_EQ expr6
   48      | expr7 EQ expr6
   49      | expr7 NOT_EQ expr6
   50      | expr6

   51 expr6: expr6 PLUS expr5
   52      | expr6 MINUS expr5
   53      | expr5

   54 expr5: expr5 STAR expr4
   55      | expr5 SLASH expr4
   56      | expr5 PRCT expr4
   57      | expr4

   58 expr4: expr4 CARET expr3
   59      | expr3

   60 expr3: PLUS expr3
   61      | MINUS expr3
   62      | NOT expr3
   63      | expr2

   64 expr2: expr2 DEC
   65      | expr2 INC
   66      | expr1

   67 expr1: L_PAR expr R_PAR
   68      | expr1 L_BRK expr R_BRK
   69      | func_call
   70      | atom

   71 atom: IDENT
   72     | STR_LIT
   73     | INT_LIT
   74     | CHAR_LIT
   75     | TRUE
   76     | FALSE
   77     | arr_lit

   78 func_call: IDENT L_PAR maybe_expr_comma_list R_PAR

   79 arr_lit: L_BRC expr_comma_list R_BRC

   80 maybe_expr_comma_list: %empty
   81                      | expr_comma_list

   82 expr_comma_list: expr
   83                | expr COMMA expr_comma_list

   84 maybe_expr: %empty
   85           | expr


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258) 1
ARRAY (259) 10 11
BOOLEAN (260) 8
CHAR (261) 7
ELSE (262) 27 29
FALSE (263) 76
FOR (264) 30 31
FUNCTION (265) 12
IF (266) 27 28 29
INTEGER (267) 5
PRINT (268) 25
RETURN (269) 26
STRING (270) 6
TRUE (271) 75
VOID (272) 9
WHILE (273)
L_PAR (274) 12 27 28 29 30 31 67 78
R_PAR (275) 12 27 28 29 30 31 67 78
L_BRK (276) 10 11 68
R_BRK (277) 10 11 68
L_BRC (278) 4 24 79
R_BRC (279) 4 24 79
INC (280) 65
DEC (281) 64
MINUS (282) 52 61
NOT (283) 62
CARET (284) 58
STAR (285) 54
SLASH (286) 55
PRCT (287) 56
PLUS (288) 51 60
LT_EQ (289) 45
LT (290) 44
GT_EQ (291) 47
GT (292) 46
EQ (293) 48
NOT_EQ (294) 49
AND (295) 42
OR (296) 40
ASGN (297) 3 4 38
COLON (298) 2 3 4 15 16
S_COL (299) 2 3 23 25 26 30 31
COMMA (300) 16 83
IDENT (301) 2 3 4 15 16 71 78
STR_LIT (302) 72
INT_LIT (303) 73
CHAR_LIT (304) 74
INTERNAL_ERR (305)
SCAN_ERR (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
decl (54)
    on left: 2 3 4, on right: 18 22
type (55)
    on left: 5 6 7 8 9 10 11 12, on right: 2 3 4 10 11 12 15 16
maybe_param_list (56)
    on left: 13 14, on right: 12
param_list (57)
    on left: 15 16, on right: 14 16
maybe_decls (58)
    on left: 17 18, on right: 1 18
stmt (59)
    on left: 19 20 21 22, on right: 27 28 30 36
non_right_recursive_stmt (60)
    on left: 23 24 25 26, on right: 19 32
if_stmt (61)
    on left: 27 28, on right: 20
non_dangling_if (62)
    on left: 29, on right: 34
for_stmt (63)
    on left: 30, on right: 21
non_dangling_for (64)
    on left: 31, on right: 33
non_dangling_stmt (65)
    on left: 32 33 34, on right: 27 29 31
maybe_stmts (66)
    on left: 35 36, on right: 4 24 36
expr (67)
    on left: 37, on right: 3 11 23 27 28 29 67 68 82 83 85
expr10 (68)
    on left: 38 39, on right: 37 38
expr9 (69)
    on left: 40 41, on right: 38 39 40
expr8 (70)
    on left: 42 43, on right: 40 41 42
expr7 (71)
    on left: 44 45 46 47 48 49 50, on right: 42 43 44 45 46 47 48 49
expr6 (72)
    on left: 51 52 53, on right: 44 45 46 47 48 49 50 51 52
expr5 (73)
    on left: 54 55 56 57, on right: 51 52 53 54 55 56
expr4 (74)
    on left: 58 59, on right: 54 55 56 57 58
expr3 (75)
    on left: 60 61 62 63, on right: 58 59 60 61 62
expr2 (76)
    on left: 64 65 66, on right: 63 64 65
expr1 (77)
    on left: 67 68 69 70, on right: 66 68
atom (78)
    on left: 71 72 73 74 75 76 77, on right: 70
func_call (79)
    on left: 78, on right: 69
arr_lit (80)
    on left: 79, on right: 77
maybe_expr_comma_list (81)
    on left: 80 81, on right: 25 78
expr_comma_list (82)
    on left: 82 83, on right: 79 81 83
maybe_expr (83)
    on left: 84 85, on right: 26 30 31


State 0

    0 $accept: . program $end

    IDENT  shift, and go to state 1

    $default  reduce using rule 17 (maybe_decls)

    program      go to state 2
    decl         go to state 3
    maybe_decls  go to state 4


State 1

    2 decl: IDENT . COLON type S_COL
    3     | IDENT . COLON type ASGN expr S_COL
    4     | IDENT . COLON type ASGN L_BRC maybe_stmts R_BRC

    COLON  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

   18 maybe_decls: decl . maybe_decls

    IDENT  shift, and go to state 1

    $default  reduce using rule 17 (maybe_decls)

    decl         go to state 3
    maybe_decls  go to state 7


State 4

    1 program: maybe_decls . TOKEN_EOF

    TOKEN_EOF  shift, and go to state 8


State 5

    2 decl: IDENT COLON . type S_COL
    3     | IDENT COLON . type ASGN expr S_COL
    4     | IDENT COLON . type ASGN L_BRC maybe_stmts R_BRC

    ARRAY     shift, and go to state 9
    BOOLEAN   shift, and go to state 10
    CHAR      shift, and go to state 11
    FUNCTION  shift, and go to state 12
    INTEGER   shift, and go to state 13
    STRING    shift, and go to state 14
    VOID      shift, and go to state 15

    type  go to state 16


State 6

    0 $accept: program $end .

    $default  accept


State 7

   18 maybe_decls: decl maybe_decls .

    $default  reduce using rule 18 (maybe_decls)


State 8

    1 program: maybe_decls TOKEN_EOF .

    $default  reduce using rule 1 (program)


State 9

   10 type: ARRAY . L_BRK R_BRK type
   11     | ARRAY . L_BRK expr R_BRK type

    L_BRK  shift, and go to state 17


State 10

    8 type: BOOLEAN .

    $default  reduce using rule 8 (type)


State 11

    7 type: CHAR .

    $default  reduce using rule 7 (type)


State 12

   12 type: FUNCTION . type L_PAR maybe_param_list R_PAR

    ARRAY     shift, and go to state 9
    BOOLEAN   shift, and go to state 10
    CHAR      shift, and go to state 11
    FUNCTION  shift, and go to state 12
    INTEGER   shift, and go to state 13
    STRING    shift, and go to state 14
    VOID      shift, and go to state 15

    type  go to state 18


State 13

    5 type: INTEGER .

    $default  reduce using rule 5 (type)


State 14

    6 type: STRING .

    $default  reduce using rule 6 (type)


State 15

    9 type: VOID .

    $default  reduce using rule 9 (type)


State 16

    2 decl: IDENT COLON type . S_COL
    3     | IDENT COLON type . ASGN expr S_COL
    4     | IDENT COLON type . ASGN L_BRC maybe_stmts R_BRC

    ASGN   shift, and go to state 19
    S_COL  shift, and go to state 20


State 17

   10 type: ARRAY L_BRK . R_BRK type
   11     | ARRAY L_BRK . expr R_BRK type

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    R_BRK     shift, and go to state 24
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr       go to state 33
    expr10     go to state 34
    expr9      go to state 35
    expr8      go to state 36
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 18

   12 type: FUNCTION type . L_PAR maybe_param_list R_PAR

    L_PAR  shift, and go to state 47


State 19

    3 decl: IDENT COLON type ASGN . expr S_COL
    4     | IDENT COLON type ASGN . L_BRC maybe_stmts R_BRC

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 48
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr       go to state 49
    expr10     go to state 34
    expr9      go to state 35
    expr8      go to state 36
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 20

    2 decl: IDENT COLON type S_COL .

    $default  reduce using rule 2 (decl)


State 21

   76 atom: FALSE .

    $default  reduce using rule 76 (atom)


State 22

   75 atom: TRUE .

    $default  reduce using rule 75 (atom)


State 23

   67 expr1: L_PAR . expr R_PAR

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr       go to state 50
    expr10     go to state 34
    expr9      go to state 35
    expr8      go to state 36
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 24

   10 type: ARRAY L_BRK R_BRK . type

    ARRAY     shift, and go to state 9
    BOOLEAN   shift, and go to state 10
    CHAR      shift, and go to state 11
    FUNCTION  shift, and go to state 12
    INTEGER   shift, and go to state 13
    STRING    shift, and go to state 14
    VOID      shift, and go to state 15

    type  go to state 51


State 25

   79 arr_lit: L_BRC . expr_comma_list R_BRC

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr             go to state 52
    expr10           go to state 34
    expr9            go to state 35
    expr8            go to state 36
    expr7            go to state 37
    expr6            go to state 38
    expr5            go to state 39
    expr4            go to state 40
    expr3            go to state 41
    expr2            go to state 42
    expr1            go to state 43
    atom             go to state 44
    func_call        go to state 45
    arr_lit          go to state 46
    expr_comma_list  go to state 53


State 26

   61 expr3: MINUS . expr3

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr3      go to state 54
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 27

   62 expr3: NOT . expr3

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr3      go to state 55
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 28

   60 expr3: PLUS . expr3

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr3      go to state 56
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 29

   71 atom: IDENT .
   78 func_call: IDENT . L_PAR maybe_expr_comma_list R_PAR

    L_PAR  shift, and go to state 57

    $default  reduce using rule 71 (atom)


State 30

   72 atom: STR_LIT .

    $default  reduce using rule 72 (atom)


State 31

   73 atom: INT_LIT .

    $default  reduce using rule 73 (atom)


State 32

   74 atom: CHAR_LIT .

    $default  reduce using rule 74 (atom)


State 33

   11 type: ARRAY L_BRK expr . R_BRK type

    R_BRK  shift, and go to state 58


State 34

   37 expr: expr10 .

    $default  reduce using rule 37 (expr)


State 35

   38 expr10: expr9 . ASGN expr10
   39       | expr9 .
   40 expr9: expr9 . OR expr8

    OR    shift, and go to state 59
    ASGN  shift, and go to state 60

    $default  reduce using rule 39 (expr10)


State 36

   41 expr9: expr8 .
   42 expr8: expr8 . AND expr7

    AND  shift, and go to state 61

    $default  reduce using rule 41 (expr9)


State 37

   43 expr8: expr7 .
   44 expr7: expr7 . LT expr6
   45      | expr7 . LT_EQ expr6
   46      | expr7 . GT expr6
   47      | expr7 . GT_EQ expr6
   48      | expr7 . EQ expr6
   49      | expr7 . NOT_EQ expr6

    LT_EQ   shift, and go to state 62
    LT      shift, and go to state 63
    GT_EQ   shift, and go to state 64
    GT      shift, and go to state 65
    EQ      shift, and go to state 66
    NOT_EQ  shift, and go to state 67

    $default  reduce using rule 43 (expr8)


State 38

   50 expr7: expr6 .
   51 expr6: expr6 . PLUS expr5
   52      | expr6 . MINUS expr5

    MINUS  shift, and go to state 68
    PLUS   shift, and go to state 69

    $default  reduce using rule 50 (expr7)


State 39

   53 expr6: expr5 .
   54 expr5: expr5 . STAR expr4
   55      | expr5 . SLASH expr4
   56      | expr5 . PRCT expr4

    STAR   shift, and go to state 70
    SLASH  shift, and go to state 71
    PRCT   shift, and go to state 72

    $default  reduce using rule 53 (expr6)


State 40

   57 expr5: expr4 .
   58 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 73

    $default  reduce using rule 57 (expr5)


State 41

   59 expr4: expr3 .

    $default  reduce using rule 59 (expr4)


State 42

   63 expr3: expr2 .
   64 expr2: expr2 . DEC
   65      | expr2 . INC

    INC  shift, and go to state 74
    DEC  shift, and go to state 75

    $default  reduce using rule 63 (expr3)


State 43

   66 expr2: expr1 .
   68 expr1: expr1 . L_BRK expr R_BRK

    L_BRK  shift, and go to state 76

    $default  reduce using rule 66 (expr2)


State 44

   70 expr1: atom .

    $default  reduce using rule 70 (expr1)


State 45

   69 expr1: func_call .

    $default  reduce using rule 69 (expr1)


State 46

   77 atom: arr_lit .

    $default  reduce using rule 77 (atom)


State 47

   12 type: FUNCTION type L_PAR . maybe_param_list R_PAR

    IDENT  shift, and go to state 77

    $default  reduce using rule 13 (maybe_param_list)

    maybe_param_list  go to state 78
    param_list        go to state 79


State 48

    4 decl: IDENT COLON type ASGN L_BRC . maybe_stmts R_BRC
   79 arr_lit: L_BRC . expr_comma_list R_BRC

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 80
    IF        shift, and go to state 81
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 35 (maybe_stmts)

    decl                      go to state 86
    stmt                      go to state 87
    non_right_recursive_stmt  go to state 88
    if_stmt                   go to state 89
    for_stmt                  go to state 90
    maybe_stmts               go to state 91
    expr                      go to state 92
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46
    expr_comma_list           go to state 53


State 49

    3 decl: IDENT COLON type ASGN expr . S_COL

    S_COL  shift, and go to state 93


State 50

   67 expr1: L_PAR expr . R_PAR

    R_PAR  shift, and go to state 94


State 51

   10 type: ARRAY L_BRK R_BRK type .

    $default  reduce using rule 10 (type)


State 52

   82 expr_comma_list: expr .
   83                | expr . COMMA expr_comma_list

    COMMA  shift, and go to state 95

    $default  reduce using rule 82 (expr_comma_list)


State 53

   79 arr_lit: L_BRC expr_comma_list . R_BRC

    R_BRC  shift, and go to state 96


State 54

   61 expr3: MINUS expr3 .

    $default  reduce using rule 61 (expr3)


State 55

   62 expr3: NOT expr3 .

    $default  reduce using rule 62 (expr3)


State 56

   60 expr3: PLUS expr3 .

    $default  reduce using rule 60 (expr3)


State 57

   78 func_call: IDENT L_PAR . maybe_expr_comma_list R_PAR

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 80 (maybe_expr_comma_list)

    expr                   go to state 52
    expr10                 go to state 34
    expr9                  go to state 35
    expr8                  go to state 36
    expr7                  go to state 37
    expr6                  go to state 38
    expr5                  go to state 39
    expr4                  go to state 40
    expr3                  go to state 41
    expr2                  go to state 42
    expr1                  go to state 43
    atom                   go to state 44
    func_call              go to state 45
    arr_lit                go to state 46
    maybe_expr_comma_list  go to state 97
    expr_comma_list        go to state 98


State 58

   11 type: ARRAY L_BRK expr R_BRK . type

    ARRAY     shift, and go to state 9
    BOOLEAN   shift, and go to state 10
    CHAR      shift, and go to state 11
    FUNCTION  shift, and go to state 12
    INTEGER   shift, and go to state 13
    STRING    shift, and go to state 14
    VOID      shift, and go to state 15

    type  go to state 99


State 59

   40 expr9: expr9 OR . expr8

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr8      go to state 100
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 60

   38 expr10: expr9 ASGN . expr10

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr10     go to state 101
    expr9      go to state 35
    expr8      go to state 36
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 61

   42 expr8: expr8 AND . expr7

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr7      go to state 102
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 62

   45 expr7: expr7 LT_EQ . expr6

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr6      go to state 103
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 63

   44 expr7: expr7 LT . expr6

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr6      go to state 104
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 64

   47 expr7: expr7 GT_EQ . expr6

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr6      go to state 105
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 65

   46 expr7: expr7 GT . expr6

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr6      go to state 106
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 66

   48 expr7: expr7 EQ . expr6

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr6      go to state 107
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 67

   49 expr7: expr7 NOT_EQ . expr6

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr6      go to state 108
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 68

   52 expr6: expr6 MINUS . expr5

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr5      go to state 109
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 69

   51 expr6: expr6 PLUS . expr5

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr5      go to state 110
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 70

   54 expr5: expr5 STAR . expr4

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr4      go to state 111
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 71

   55 expr5: expr5 SLASH . expr4

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr4      go to state 112
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 72

   56 expr5: expr5 PRCT . expr4

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr4      go to state 113
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 73

   58 expr4: expr4 CARET . expr3

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr3      go to state 114
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 74

   65 expr2: expr2 INC .

    $default  reduce using rule 65 (expr2)


State 75

   64 expr2: expr2 DEC .

    $default  reduce using rule 64 (expr2)


State 76

   68 expr1: expr1 L_BRK . expr R_BRK

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr       go to state 115
    expr10     go to state 34
    expr9      go to state 35
    expr8      go to state 36
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 77

   15 param_list: IDENT . COLON type
   16           | IDENT . COLON type COMMA param_list

    COLON  shift, and go to state 116


State 78

   12 type: FUNCTION type L_PAR maybe_param_list . R_PAR

    R_PAR  shift, and go to state 117


State 79

   14 maybe_param_list: param_list .

    $default  reduce using rule 14 (maybe_param_list)


State 80

   30 for_stmt: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt

    L_PAR  shift, and go to state 118


State 81

   27 if_stmt: IF . L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   28        | IF . L_PAR expr R_PAR stmt

    L_PAR  shift, and go to state 119


State 82

   25 non_right_recursive_stmt: PRINT . maybe_expr_comma_list S_COL

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 80 (maybe_expr_comma_list)

    expr                   go to state 52
    expr10                 go to state 34
    expr9                  go to state 35
    expr8                  go to state 36
    expr7                  go to state 37
    expr6                  go to state 38
    expr5                  go to state 39
    expr4                  go to state 40
    expr3                  go to state 41
    expr2                  go to state 42
    expr1                  go to state 43
    atom                   go to state 44
    func_call              go to state 45
    arr_lit                go to state 46
    maybe_expr_comma_list  go to state 120
    expr_comma_list        go to state 98


State 83

   26 non_right_recursive_stmt: RETURN . maybe_expr S_COL

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 84 (maybe_expr)

    expr        go to state 121
    expr10      go to state 34
    expr9       go to state 35
    expr8       go to state 36
    expr7       go to state 37
    expr6       go to state 38
    expr5       go to state 39
    expr4       go to state 40
    expr3       go to state 41
    expr2       go to state 42
    expr1       go to state 43
    atom        go to state 44
    func_call   go to state 45
    arr_lit     go to state 46
    maybe_expr  go to state 122


State 84

   24 non_right_recursive_stmt: L_BRC . maybe_stmts R_BRC
   79 arr_lit: L_BRC . expr_comma_list R_BRC

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 80
    IF        shift, and go to state 81
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 35 (maybe_stmts)

    decl                      go to state 86
    stmt                      go to state 87
    non_right_recursive_stmt  go to state 88
    if_stmt                   go to state 89
    for_stmt                  go to state 90
    maybe_stmts               go to state 123
    expr                      go to state 92
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46
    expr_comma_list           go to state 53


State 85

    2 decl: IDENT . COLON type S_COL
    3     | IDENT . COLON type ASGN expr S_COL
    4     | IDENT . COLON type ASGN L_BRC maybe_stmts R_BRC
   71 atom: IDENT .
   78 func_call: IDENT . L_PAR maybe_expr_comma_list R_PAR

    L_PAR  shift, and go to state 57
    COLON  shift, and go to state 5

    $default  reduce using rule 71 (atom)


State 86

   22 stmt: decl .

    $default  reduce using rule 22 (stmt)


State 87

   36 maybe_stmts: stmt . maybe_stmts

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 80
    IF        shift, and go to state 81
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 35 (maybe_stmts)

    decl                      go to state 86
    stmt                      go to state 87
    non_right_recursive_stmt  go to state 88
    if_stmt                   go to state 89
    for_stmt                  go to state 90
    maybe_stmts               go to state 124
    expr                      go to state 125
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46


State 88

   19 stmt: non_right_recursive_stmt .

    $default  reduce using rule 19 (stmt)


State 89

   20 stmt: if_stmt .

    $default  reduce using rule 20 (stmt)


State 90

   21 stmt: for_stmt .

    $default  reduce using rule 21 (stmt)


State 91

    4 decl: IDENT COLON type ASGN L_BRC maybe_stmts . R_BRC

    R_BRC  shift, and go to state 126


State 92

   23 non_right_recursive_stmt: expr . S_COL
   82 expr_comma_list: expr .
   83                | expr . COMMA expr_comma_list

    S_COL  shift, and go to state 127
    COMMA  shift, and go to state 95

    $default  reduce using rule 82 (expr_comma_list)


State 93

    3 decl: IDENT COLON type ASGN expr S_COL .

    $default  reduce using rule 3 (decl)


State 94

   67 expr1: L_PAR expr R_PAR .

    $default  reduce using rule 67 (expr1)


State 95

   83 expr_comma_list: expr COMMA . expr_comma_list

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr             go to state 52
    expr10           go to state 34
    expr9            go to state 35
    expr8            go to state 36
    expr7            go to state 37
    expr6            go to state 38
    expr5            go to state 39
    expr4            go to state 40
    expr3            go to state 41
    expr2            go to state 42
    expr1            go to state 43
    atom             go to state 44
    func_call        go to state 45
    arr_lit          go to state 46
    expr_comma_list  go to state 128


State 96

   79 arr_lit: L_BRC expr_comma_list R_BRC .

    $default  reduce using rule 79 (arr_lit)


State 97

   78 func_call: IDENT L_PAR maybe_expr_comma_list . R_PAR

    R_PAR  shift, and go to state 129


State 98

   81 maybe_expr_comma_list: expr_comma_list .

    $default  reduce using rule 81 (maybe_expr_comma_list)


State 99

   11 type: ARRAY L_BRK expr R_BRK type .

    $default  reduce using rule 11 (type)


State 100

   40 expr9: expr9 OR expr8 .
   42 expr8: expr8 . AND expr7

    AND  shift, and go to state 61

    $default  reduce using rule 40 (expr9)


State 101

   38 expr10: expr9 ASGN expr10 .

    $default  reduce using rule 38 (expr10)


State 102

   42 expr8: expr8 AND expr7 .
   44 expr7: expr7 . LT expr6
   45      | expr7 . LT_EQ expr6
   46      | expr7 . GT expr6
   47      | expr7 . GT_EQ expr6
   48      | expr7 . EQ expr6
   49      | expr7 . NOT_EQ expr6

    LT_EQ   shift, and go to state 62
    LT      shift, and go to state 63
    GT_EQ   shift, and go to state 64
    GT      shift, and go to state 65
    EQ      shift, and go to state 66
    NOT_EQ  shift, and go to state 67

    $default  reduce using rule 42 (expr8)


State 103

   45 expr7: expr7 LT_EQ expr6 .
   51 expr6: expr6 . PLUS expr5
   52      | expr6 . MINUS expr5

    MINUS  shift, and go to state 68
    PLUS   shift, and go to state 69

    $default  reduce using rule 45 (expr7)


State 104

   44 expr7: expr7 LT expr6 .
   51 expr6: expr6 . PLUS expr5
   52      | expr6 . MINUS expr5

    MINUS  shift, and go to state 68
    PLUS   shift, and go to state 69

    $default  reduce using rule 44 (expr7)


State 105

   47 expr7: expr7 GT_EQ expr6 .
   51 expr6: expr6 . PLUS expr5
   52      | expr6 . MINUS expr5

    MINUS  shift, and go to state 68
    PLUS   shift, and go to state 69

    $default  reduce using rule 47 (expr7)


State 106

   46 expr7: expr7 GT expr6 .
   51 expr6: expr6 . PLUS expr5
   52      | expr6 . MINUS expr5

    MINUS  shift, and go to state 68
    PLUS   shift, and go to state 69

    $default  reduce using rule 46 (expr7)


State 107

   48 expr7: expr7 EQ expr6 .
   51 expr6: expr6 . PLUS expr5
   52      | expr6 . MINUS expr5

    MINUS  shift, and go to state 68
    PLUS   shift, and go to state 69

    $default  reduce using rule 48 (expr7)


State 108

   49 expr7: expr7 NOT_EQ expr6 .
   51 expr6: expr6 . PLUS expr5
   52      | expr6 . MINUS expr5

    MINUS  shift, and go to state 68
    PLUS   shift, and go to state 69

    $default  reduce using rule 49 (expr7)


State 109

   52 expr6: expr6 MINUS expr5 .
   54 expr5: expr5 . STAR expr4
   55      | expr5 . SLASH expr4
   56      | expr5 . PRCT expr4

    STAR   shift, and go to state 70
    SLASH  shift, and go to state 71
    PRCT   shift, and go to state 72

    $default  reduce using rule 52 (expr6)


State 110

   51 expr6: expr6 PLUS expr5 .
   54 expr5: expr5 . STAR expr4
   55      | expr5 . SLASH expr4
   56      | expr5 . PRCT expr4

    STAR   shift, and go to state 70
    SLASH  shift, and go to state 71
    PRCT   shift, and go to state 72

    $default  reduce using rule 51 (expr6)


State 111

   54 expr5: expr5 STAR expr4 .
   58 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 73

    $default  reduce using rule 54 (expr5)


State 112

   55 expr5: expr5 SLASH expr4 .
   58 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 73

    $default  reduce using rule 55 (expr5)


State 113

   56 expr5: expr5 PRCT expr4 .
   58 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 73

    $default  reduce using rule 56 (expr5)


State 114

   58 expr4: expr4 CARET expr3 .

    $default  reduce using rule 58 (expr4)


State 115

   68 expr1: expr1 L_BRK expr . R_BRK

    R_BRK  shift, and go to state 130


State 116

   15 param_list: IDENT COLON . type
   16           | IDENT COLON . type COMMA param_list

    ARRAY     shift, and go to state 9
    BOOLEAN   shift, and go to state 10
    CHAR      shift, and go to state 11
    FUNCTION  shift, and go to state 12
    INTEGER   shift, and go to state 13
    STRING    shift, and go to state 14
    VOID      shift, and go to state 15

    type  go to state 131


State 117

   12 type: FUNCTION type L_PAR maybe_param_list R_PAR .

    $default  reduce using rule 12 (type)


State 118

   30 for_stmt: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 84 (maybe_expr)

    expr        go to state 121
    expr10      go to state 34
    expr9       go to state 35
    expr8       go to state 36
    expr7       go to state 37
    expr6       go to state 38
    expr5       go to state 39
    expr4       go to state 40
    expr3       go to state 41
    expr2       go to state 42
    expr1       go to state 43
    atom        go to state 44
    func_call   go to state 45
    arr_lit     go to state 46
    maybe_expr  go to state 132


State 119

   27 if_stmt: IF L_PAR . expr R_PAR non_dangling_stmt ELSE stmt
   28        | IF L_PAR . expr R_PAR stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr       go to state 133
    expr10     go to state 34
    expr9      go to state 35
    expr8      go to state 36
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 120

   25 non_right_recursive_stmt: PRINT maybe_expr_comma_list . S_COL

    S_COL  shift, and go to state 134


State 121

   85 maybe_expr: expr .

    $default  reduce using rule 85 (maybe_expr)


State 122

   26 non_right_recursive_stmt: RETURN maybe_expr . S_COL

    S_COL  shift, and go to state 135


State 123

   24 non_right_recursive_stmt: L_BRC maybe_stmts . R_BRC

    R_BRC  shift, and go to state 136


State 124

   36 maybe_stmts: stmt maybe_stmts .

    $default  reduce using rule 36 (maybe_stmts)


State 125

   23 non_right_recursive_stmt: expr . S_COL

    S_COL  shift, and go to state 127


State 126

    4 decl: IDENT COLON type ASGN L_BRC maybe_stmts R_BRC .

    $default  reduce using rule 4 (decl)


State 127

   23 non_right_recursive_stmt: expr S_COL .

    $default  reduce using rule 23 (non_right_recursive_stmt)


State 128

   83 expr_comma_list: expr COMMA expr_comma_list .

    $default  reduce using rule 83 (expr_comma_list)


State 129

   78 func_call: IDENT L_PAR maybe_expr_comma_list R_PAR .

    $default  reduce using rule 78 (func_call)


State 130

   68 expr1: expr1 L_BRK expr R_BRK .

    $default  reduce using rule 68 (expr1)


State 131

   15 param_list: IDENT COLON type .
   16           | IDENT COLON type . COMMA param_list

    COMMA  shift, and go to state 137

    $default  reduce using rule 15 (param_list)


State 132

   30 for_stmt: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR stmt

    S_COL  shift, and go to state 138


State 133

   27 if_stmt: IF L_PAR expr . R_PAR non_dangling_stmt ELSE stmt
   28        | IF L_PAR expr . R_PAR stmt

    R_PAR  shift, and go to state 139


State 134

   25 non_right_recursive_stmt: PRINT maybe_expr_comma_list S_COL .

    $default  reduce using rule 25 (non_right_recursive_stmt)


State 135

   26 non_right_recursive_stmt: RETURN maybe_expr S_COL .

    $default  reduce using rule 26 (non_right_recursive_stmt)


State 136

   24 non_right_recursive_stmt: L_BRC maybe_stmts R_BRC .

    $default  reduce using rule 24 (non_right_recursive_stmt)


State 137

   16 param_list: IDENT COLON type COMMA . param_list

    IDENT  shift, and go to state 77

    param_list  go to state 140


State 138

   30 for_stmt: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 84 (maybe_expr)

    expr        go to state 121
    expr10      go to state 34
    expr9       go to state 35
    expr8       go to state 36
    expr7       go to state 37
    expr6       go to state 38
    expr5       go to state 39
    expr4       go to state 40
    expr3       go to state 41
    expr2       go to state 42
    expr1       go to state 43
    atom        go to state 44
    func_call   go to state 45
    arr_lit     go to state 46
    maybe_expr  go to state 141


State 139

   27 if_stmt: IF L_PAR expr R_PAR . non_dangling_stmt ELSE stmt
   28        | IF L_PAR expr R_PAR . stmt

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 142
    IF        shift, and go to state 143
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    decl                      go to state 86
    stmt                      go to state 144
    non_right_recursive_stmt  go to state 145
    if_stmt                   go to state 89
    non_dangling_if           go to state 146
    for_stmt                  go to state 90
    non_dangling_for          go to state 147
    non_dangling_stmt         go to state 148
    expr                      go to state 125
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46


State 140

   16 param_list: IDENT COLON type COMMA param_list .

    $default  reduce using rule 16 (param_list)


State 141

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR stmt

    S_COL  shift, and go to state 149


State 142

   30 for_stmt: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   31 non_dangling_for: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    L_PAR  shift, and go to state 150


State 143

   27 if_stmt: IF . L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   28        | IF . L_PAR expr R_PAR stmt
   29 non_dangling_if: IF . L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

    L_PAR  shift, and go to state 151


State 144

   28 if_stmt: IF L_PAR expr R_PAR stmt .

    $default  reduce using rule 28 (if_stmt)


State 145

   19 stmt: non_right_recursive_stmt .
   32 non_dangling_stmt: non_right_recursive_stmt .

    ELSE      reduce using rule 32 (non_dangling_stmt)
    $default  reduce using rule 19 (stmt)


State 146

   34 non_dangling_stmt: non_dangling_if .

    $default  reduce using rule 34 (non_dangling_stmt)


State 147

   33 non_dangling_stmt: non_dangling_for .

    $default  reduce using rule 33 (non_dangling_stmt)


State 148

   27 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt . ELSE stmt

    ELSE  shift, and go to state 152


State 149

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 84 (maybe_expr)

    expr        go to state 121
    expr10      go to state 34
    expr9       go to state 35
    expr8       go to state 36
    expr7       go to state 37
    expr6       go to state 38
    expr5       go to state 39
    expr4       go to state 40
    expr3       go to state 41
    expr2       go to state 42
    expr1       go to state 43
    atom        go to state 44
    func_call   go to state 45
    arr_lit     go to state 46
    maybe_expr  go to state 153


State 150

   30 for_stmt: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   31 non_dangling_for: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 84 (maybe_expr)

    expr        go to state 121
    expr10      go to state 34
    expr9       go to state 35
    expr8       go to state 36
    expr7       go to state 37
    expr6       go to state 38
    expr5       go to state 39
    expr4       go to state 40
    expr3       go to state 41
    expr2       go to state 42
    expr1       go to state 43
    atom        go to state 44
    func_call   go to state 45
    arr_lit     go to state 46
    maybe_expr  go to state 154


State 151

   27 if_stmt: IF L_PAR . expr R_PAR non_dangling_stmt ELSE stmt
   28        | IF L_PAR . expr R_PAR stmt
   29 non_dangling_if: IF L_PAR . expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    expr       go to state 155
    expr10     go to state 34
    expr9      go to state 35
    expr8      go to state 36
    expr7      go to state 37
    expr6      go to state 38
    expr5      go to state 39
    expr4      go to state 40
    expr3      go to state 41
    expr2      go to state 42
    expr1      go to state 43
    atom       go to state 44
    func_call  go to state 45
    arr_lit    go to state 46


State 152

   27 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE . stmt

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 80
    IF        shift, and go to state 81
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    decl                      go to state 86
    stmt                      go to state 156
    non_right_recursive_stmt  go to state 88
    if_stmt                   go to state 89
    for_stmt                  go to state 90
    expr                      go to state 125
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46


State 153

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR stmt

    R_PAR  shift, and go to state 157


State 154

   30 for_stmt: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   31 non_dangling_for: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    S_COL  shift, and go to state 158


State 155

   27 if_stmt: IF L_PAR expr . R_PAR non_dangling_stmt ELSE stmt
   28        | IF L_PAR expr . R_PAR stmt
   29 non_dangling_if: IF L_PAR expr . R_PAR non_dangling_stmt ELSE non_dangling_stmt

    R_PAR  shift, and go to state 159


State 156

   27 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE stmt .

    $default  reduce using rule 27 (if_stmt)


State 157

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . stmt

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 80
    IF        shift, and go to state 81
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    decl                      go to state 86
    stmt                      go to state 160
    non_right_recursive_stmt  go to state 88
    if_stmt                   go to state 89
    for_stmt                  go to state 90
    expr                      go to state 125
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46


State 158

   30 for_stmt: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR stmt
   31 non_dangling_for: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 84 (maybe_expr)

    expr        go to state 121
    expr10      go to state 34
    expr9       go to state 35
    expr8       go to state 36
    expr7       go to state 37
    expr6       go to state 38
    expr5       go to state 39
    expr4       go to state 40
    expr3       go to state 41
    expr2       go to state 42
    expr1       go to state 43
    atom        go to state 44
    func_call   go to state 45
    arr_lit     go to state 46
    maybe_expr  go to state 161


State 159

   27 if_stmt: IF L_PAR expr R_PAR . non_dangling_stmt ELSE stmt
   28        | IF L_PAR expr R_PAR . stmt
   29 non_dangling_if: IF L_PAR expr R_PAR . non_dangling_stmt ELSE non_dangling_stmt

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 142
    IF        shift, and go to state 143
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    decl                      go to state 86
    stmt                      go to state 144
    non_right_recursive_stmt  go to state 145
    if_stmt                   go to state 89
    non_dangling_if           go to state 146
    for_stmt                  go to state 90
    non_dangling_for          go to state 147
    non_dangling_stmt         go to state 162
    expr                      go to state 125
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46


State 160

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt .

    $default  reduce using rule 30 (for_stmt)


State 161

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR stmt
   31 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR non_dangling_stmt

    S_COL  shift, and go to state 163


State 162

   27 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt . ELSE stmt
   29 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt . ELSE non_dangling_stmt

    ELSE  shift, and go to state 164


State 163

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR stmt
   31 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR non_dangling_stmt

    FALSE     shift, and go to state 21
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 25
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 29
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    $default  reduce using rule 84 (maybe_expr)

    expr        go to state 121
    expr10      go to state 34
    expr9       go to state 35
    expr8       go to state 36
    expr7       go to state 37
    expr6       go to state 38
    expr5       go to state 39
    expr4       go to state 40
    expr3       go to state 41
    expr2       go to state 42
    expr1       go to state 43
    atom        go to state 44
    func_call   go to state 45
    arr_lit     go to state 46
    maybe_expr  go to state 165


State 164

   27 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE . stmt
   29 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE . non_dangling_stmt

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 142
    IF        shift, and go to state 143
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    decl                      go to state 86
    stmt                      go to state 156
    non_right_recursive_stmt  go to state 145
    if_stmt                   go to state 89
    non_dangling_if           go to state 146
    for_stmt                  go to state 90
    non_dangling_for          go to state 147
    non_dangling_stmt         go to state 166
    expr                      go to state 125
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46


State 165

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR stmt
   31 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR non_dangling_stmt

    R_PAR  shift, and go to state 167


State 166

   29 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt .

    $default  reduce using rule 29 (non_dangling_if)


State 167

   30 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . stmt
   31 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . non_dangling_stmt

    FALSE     shift, and go to state 21
    FOR       shift, and go to state 142
    IF        shift, and go to state 143
    PRINT     shift, and go to state 82
    RETURN    shift, and go to state 83
    TRUE      shift, and go to state 22
    L_PAR     shift, and go to state 23
    L_BRC     shift, and go to state 84
    MINUS     shift, and go to state 26
    NOT       shift, and go to state 27
    PLUS      shift, and go to state 28
    IDENT     shift, and go to state 85
    STR_LIT   shift, and go to state 30
    INT_LIT   shift, and go to state 31
    CHAR_LIT  shift, and go to state 32

    decl                      go to state 86
    stmt                      go to state 160
    non_right_recursive_stmt  go to state 145
    if_stmt                   go to state 89
    non_dangling_if           go to state 146
    for_stmt                  go to state 90
    non_dangling_for          go to state 147
    non_dangling_stmt         go to state 168
    expr                      go to state 125
    expr10                    go to state 34
    expr9                     go to state 35
    expr8                     go to state 36
    expr7                     go to state 37
    expr6                     go to state 38
    expr5                     go to state 39
    expr4                     go to state 40
    expr3                     go to state 41
    expr2                     go to state 42
    expr1                     go to state 43
    atom                      go to state 44
    func_call                 go to state 45
    arr_lit                   go to state 46


State 168

   31 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt .

    $default  reduce using rule 31 (non_dangling_for)
