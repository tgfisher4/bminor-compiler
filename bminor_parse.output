Terminals unused in grammar

   TOKEN_EOF
   ARRAY
   BOOLEAN
   CHAR
   FALSE
   FUNCTION
   INTEGER
   STRING
   TRUE
   VOID
   WHILE
   COLON
   INTERNAL_ERR
   SCAN_ERR


State 107 conflicts: 16 reduce/reduce
State 108 conflicts: 16 reduce/reduce
State 110 conflicts: 16 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: stmt

    2 stmt: non_right_recursive_stmt
    3     | if_stmt
    4     | for_stmt

    5 non_right_recursive_stmt: expr S_COL
    6                         | L_BRC maybe_stmts R_BRC
    7                         | PRINT maybe_expr_comma_list S_COL
    8                         | RETURN maybe_expr S_COL

    9 if_stmt: IF L_PAR expr R_PAR stmt
   10        | IF L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   11        | non_dangling_if

   12 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

   13 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   14         | non_dangling_for

   15 non_dangling_stmt: non_right_recursive_stmt
   16                  | non_dangling_for
   17                  | non_dangling_if

   18 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

   19 maybe_stmts: %empty
   20            | stmt maybe_stmts

   21 expr: expr10

   22 lvalue: IDENT L_BRK expr R_BRK
   23       | IDENT

   24 expr10: expr9 ASGN expr10
   25       | expr9 ASGN arr_lit
   26       | expr9

   27 expr9: expr9 OR expr8
   28      | expr8

   29 expr8: expr8 AND expr7
   30      | expr7

   31 expr7: expr7 LT expr6
   32      | expr7 LT_EQ expr6
   33      | expr7 GT expr6
   34      | expr7 GT_EQ expr6
   35      | expr7 EQ expr6
   36      | expr7 NOT_EQ expr6
   37      | expr6

   38 expr6: expr6 PLUS expr5
   39      | expr6 MINUS expr5
   40      | expr5

   41 expr5: expr5 STAR expr4
   42      | expr5 SLASH expr4
   43      | expr5 PRCT expr4
   44      | expr4

   45 expr4: expr4 CARET expr3
   46      | expr3

   47 expr3: PLUS expr3
   48      | MINUS expr3
   49      | NOT expr3
   50      | expr2

   51 expr2: expr2 DEC
   52      | expr2 INC
   53      | expr1

   54 expr1: L_PAR expr R_PAR
   55      | L_BRK expr R_BRK
   56      | func_call
   57      | atom

   58 atom: lvalue
   59     | STR_LIT
   60     | INT_LIT
   61     | CHAR_LIT

   62 func_call: IDENT L_PAR maybe_expr_comma_list R_PAR

   63 arr_lit: IDENT L_BRC maybe_expr_comma_list R_BRC

   64 maybe_expr_comma_list: %empty
   65                      | expr_comma_list

   66 expr_comma_list: expr
   67                | expr COMMA expr_comma_list

   68 maybe_expr: %empty
   69           | expr


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_EOF (258)
ARRAY (259)
BOOLEAN (260)
CHAR (261)
ELSE (262) 10 12
FALSE (263)
FOR (264) 13 18
FUNCTION (265)
IF (266) 9 10 12
INTEGER (267)
PRINT (268) 7
RETURN (269) 8
STRING (270)
TRUE (271)
VOID (272)
WHILE (273)
L_PAR (274) 9 10 12 13 18 54 62
R_PAR (275) 9 10 12 13 18 54 62
L_BRK (276) 22 55
R_BRK (277) 22 55
L_BRC (278) 6 63
R_BRC (279) 6 63
INC (280) 52
DEC (281) 51
MINUS (282) 39 48
NOT (283) 49
CARET (284) 45
STAR (285) 41
SLASH (286) 42
PRCT (287) 43
PLUS (288) 38 47
LT_EQ (289) 32
LT (290) 31
GT_EQ (291) 34
GT (292) 33
EQ (293) 35
NOT_EQ (294) 36
AND (295) 29
OR (296) 27
ASGN (297) 24 25
COLON (298)
S_COL (299) 5 7 8 13 18
COMMA (300) 67
IDENT (301) 22 23 62 63
STR_LIT (302) 59
INT_LIT (303) 60
CHAR_LIT (304) 61
INTERNAL_ERR (305)
SCAN_ERR (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
stmt (54)
    on left: 2 3 4, on right: 1 9 10 13 20
non_right_recursive_stmt (55)
    on left: 5 6 7 8, on right: 2 15
if_stmt (56)
    on left: 9 10 11, on right: 3
non_dangling_if (57)
    on left: 12, on right: 11 17
for_stmt (58)
    on left: 13 14, on right: 4
non_dangling_stmt (59)
    on left: 15 16 17, on right: 10 12 18
non_dangling_for (60)
    on left: 18, on right: 14 16
maybe_stmts (61)
    on left: 19 20, on right: 6 20
expr (62)
    on left: 21, on right: 5 9 10 12 22 54 55 66 67 69
lvalue (63)
    on left: 22 23, on right: 58
expr10 (64)
    on left: 24 25 26, on right: 21 24
expr9 (65)
    on left: 27 28, on right: 24 25 26 27
expr8 (66)
    on left: 29 30, on right: 27 28 29
expr7 (67)
    on left: 31 32 33 34 35 36 37, on right: 29 30 31 32 33 34 35 36
expr6 (68)
    on left: 38 39 40, on right: 31 32 33 34 35 36 37 38 39
expr5 (69)
    on left: 41 42 43 44, on right: 38 39 40 41 42 43
expr4 (70)
    on left: 45 46, on right: 41 42 43 44 45
expr3 (71)
    on left: 47 48 49 50, on right: 45 46 47 48 49
expr2 (72)
    on left: 51 52 53, on right: 50 51 52
expr1 (73)
    on left: 54 55 56 57, on right: 53
atom (74)
    on left: 58 59 60 61, on right: 57
func_call (75)
    on left: 62, on right: 56
arr_lit (76)
    on left: 63, on right: 25
maybe_expr_comma_list (77)
    on left: 64 65, on right: 7 62 63
expr_comma_list (78)
    on left: 66 67, on right: 65 67
maybe_expr (79)
    on left: 68 69, on right: 8 13 18


State 0

    0 $accept: . program $end

    FOR       shift, and go to state 1
    IF        shift, and go to state 2
    PRINT     shift, and go to state 3
    RETURN    shift, and go to state 4
    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    L_BRC     shift, and go to state 7
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    program                   go to state 15
    stmt                      go to state 16
    non_right_recursive_stmt  go to state 17
    if_stmt                   go to state 18
    non_dangling_if           go to state 19
    for_stmt                  go to state 20
    non_dangling_for          go to state 21
    expr                      go to state 22
    lvalue                    go to state 23
    expr10                    go to state 24
    expr9                     go to state 25
    expr8                     go to state 26
    expr7                     go to state 27
    expr6                     go to state 28
    expr5                     go to state 29
    expr4                     go to state 30
    expr3                     go to state 31
    expr2                     go to state 32
    expr1                     go to state 33
    atom                      go to state 34
    func_call                 go to state 35


State 1

   13 for_stmt: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   18 non_dangling_for: FOR . L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    L_PAR  shift, and go to state 36


State 2

    9 if_stmt: IF . L_PAR expr R_PAR stmt
   10        | IF . L_PAR expr R_PAR non_dangling_stmt ELSE stmt
   12 non_dangling_if: IF . L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

    L_PAR  shift, and go to state 37


State 3

    7 non_right_recursive_stmt: PRINT . maybe_expr_comma_list S_COL

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 64 (maybe_expr_comma_list)

    expr                   go to state 38
    lvalue                 go to state 23
    expr10                 go to state 24
    expr9                  go to state 25
    expr8                  go to state 26
    expr7                  go to state 27
    expr6                  go to state 28
    expr5                  go to state 29
    expr4                  go to state 30
    expr3                  go to state 31
    expr2                  go to state 32
    expr1                  go to state 33
    atom                   go to state 34
    func_call              go to state 35
    maybe_expr_comma_list  go to state 39
    expr_comma_list        go to state 40


State 4

    8 non_right_recursive_stmt: RETURN . maybe_expr S_COL

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 68 (maybe_expr)

    expr        go to state 41
    lvalue      go to state 23
    expr10      go to state 24
    expr9       go to state 25
    expr8       go to state 26
    expr7       go to state 27
    expr6       go to state 28
    expr5       go to state 29
    expr4       go to state 30
    expr3       go to state 31
    expr2       go to state 32
    expr1       go to state 33
    atom        go to state 34
    func_call   go to state 35
    maybe_expr  go to state 42


State 5

   54 expr1: L_PAR . expr R_PAR

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    expr       go to state 43
    lvalue     go to state 23
    expr10     go to state 24
    expr9      go to state 25
    expr8      go to state 26
    expr7      go to state 27
    expr6      go to state 28
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 6

   55 expr1: L_BRK . expr R_BRK

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    expr       go to state 44
    lvalue     go to state 23
    expr10     go to state 24
    expr9      go to state 25
    expr8      go to state 26
    expr7      go to state 27
    expr6      go to state 28
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 7

    6 non_right_recursive_stmt: L_BRC . maybe_stmts R_BRC

    FOR       shift, and go to state 1
    IF        shift, and go to state 2
    PRINT     shift, and go to state 3
    RETURN    shift, and go to state 4
    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    L_BRC     shift, and go to state 7
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 19 (maybe_stmts)

    stmt                      go to state 45
    non_right_recursive_stmt  go to state 17
    if_stmt                   go to state 18
    non_dangling_if           go to state 19
    for_stmt                  go to state 20
    non_dangling_for          go to state 21
    maybe_stmts               go to state 46
    expr                      go to state 22
    lvalue                    go to state 23
    expr10                    go to state 24
    expr9                     go to state 25
    expr8                     go to state 26
    expr7                     go to state 27
    expr6                     go to state 28
    expr5                     go to state 29
    expr4                     go to state 30
    expr3                     go to state 31
    expr2                     go to state 32
    expr1                     go to state 33
    atom                      go to state 34
    func_call                 go to state 35


State 8

   48 expr3: MINUS . expr3

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr3      go to state 47
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 9

   49 expr3: NOT . expr3

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr3      go to state 48
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 10

   47 expr3: PLUS . expr3

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr3      go to state 49
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 11

   22 lvalue: IDENT . L_BRK expr R_BRK
   23       | IDENT .
   62 func_call: IDENT . L_PAR maybe_expr_comma_list R_PAR

    L_PAR  shift, and go to state 50
    L_BRK  shift, and go to state 51

    $default  reduce using rule 23 (lvalue)


State 12

   59 atom: STR_LIT .

    $default  reduce using rule 59 (atom)


State 13

   60 atom: INT_LIT .

    $default  reduce using rule 60 (atom)


State 14

   61 atom: CHAR_LIT .

    $default  reduce using rule 61 (atom)


State 15

    0 $accept: program . $end

    $end  shift, and go to state 52


State 16

    1 program: stmt .

    $default  reduce using rule 1 (program)


State 17

    2 stmt: non_right_recursive_stmt .

    $default  reduce using rule 2 (stmt)


State 18

    3 stmt: if_stmt .

    $default  reduce using rule 3 (stmt)


State 19

   11 if_stmt: non_dangling_if .

    $default  reduce using rule 11 (if_stmt)


State 20

    4 stmt: for_stmt .

    $default  reduce using rule 4 (stmt)


State 21

   14 for_stmt: non_dangling_for .

    $default  reduce using rule 14 (for_stmt)


State 22

    5 non_right_recursive_stmt: expr . S_COL

    S_COL  shift, and go to state 53


State 23

   58 atom: lvalue .

    $default  reduce using rule 58 (atom)


State 24

   21 expr: expr10 .

    $default  reduce using rule 21 (expr)


State 25

   24 expr10: expr9 . ASGN expr10
   25       | expr9 . ASGN arr_lit
   26       | expr9 .
   27 expr9: expr9 . OR expr8

    OR    shift, and go to state 54
    ASGN  shift, and go to state 55

    $default  reduce using rule 26 (expr10)


State 26

   28 expr9: expr8 .
   29 expr8: expr8 . AND expr7

    AND  shift, and go to state 56

    $default  reduce using rule 28 (expr9)


State 27

   30 expr8: expr7 .
   31 expr7: expr7 . LT expr6
   32      | expr7 . LT_EQ expr6
   33      | expr7 . GT expr6
   34      | expr7 . GT_EQ expr6
   35      | expr7 . EQ expr6
   36      | expr7 . NOT_EQ expr6

    LT_EQ   shift, and go to state 57
    LT      shift, and go to state 58
    GT_EQ   shift, and go to state 59
    GT      shift, and go to state 60
    EQ      shift, and go to state 61
    NOT_EQ  shift, and go to state 62

    $default  reduce using rule 30 (expr8)


State 28

   37 expr7: expr6 .
   38 expr6: expr6 . PLUS expr5
   39      | expr6 . MINUS expr5

    MINUS  shift, and go to state 63
    PLUS   shift, and go to state 64

    $default  reduce using rule 37 (expr7)


State 29

   40 expr6: expr5 .
   41 expr5: expr5 . STAR expr4
   42      | expr5 . SLASH expr4
   43      | expr5 . PRCT expr4

    STAR   shift, and go to state 65
    SLASH  shift, and go to state 66
    PRCT   shift, and go to state 67

    $default  reduce using rule 40 (expr6)


State 30

   44 expr5: expr4 .
   45 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 68

    $default  reduce using rule 44 (expr5)


State 31

   46 expr4: expr3 .

    $default  reduce using rule 46 (expr4)


State 32

   50 expr3: expr2 .
   51 expr2: expr2 . DEC
   52      | expr2 . INC

    INC  shift, and go to state 69
    DEC  shift, and go to state 70

    $default  reduce using rule 50 (expr3)


State 33

   53 expr2: expr1 .

    $default  reduce using rule 53 (expr2)


State 34

   57 expr1: atom .

    $default  reduce using rule 57 (expr1)


State 35

   56 expr1: func_call .

    $default  reduce using rule 56 (expr1)


State 36

   13 for_stmt: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   18 non_dangling_for: FOR L_PAR . maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 68 (maybe_expr)

    expr        go to state 41
    lvalue      go to state 23
    expr10      go to state 24
    expr9       go to state 25
    expr8       go to state 26
    expr7       go to state 27
    expr6       go to state 28
    expr5       go to state 29
    expr4       go to state 30
    expr3       go to state 31
    expr2       go to state 32
    expr1       go to state 33
    atom        go to state 34
    func_call   go to state 35
    maybe_expr  go to state 71


State 37

    9 if_stmt: IF L_PAR . expr R_PAR stmt
   10        | IF L_PAR . expr R_PAR non_dangling_stmt ELSE stmt
   12 non_dangling_if: IF L_PAR . expr R_PAR non_dangling_stmt ELSE non_dangling_stmt

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    expr       go to state 72
    lvalue     go to state 23
    expr10     go to state 24
    expr9      go to state 25
    expr8      go to state 26
    expr7      go to state 27
    expr6      go to state 28
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 38

   66 expr_comma_list: expr .
   67                | expr . COMMA expr_comma_list

    COMMA  shift, and go to state 73

    $default  reduce using rule 66 (expr_comma_list)


State 39

    7 non_right_recursive_stmt: PRINT maybe_expr_comma_list . S_COL

    S_COL  shift, and go to state 74


State 40

   65 maybe_expr_comma_list: expr_comma_list .

    $default  reduce using rule 65 (maybe_expr_comma_list)


State 41

   69 maybe_expr: expr .

    $default  reduce using rule 69 (maybe_expr)


State 42

    8 non_right_recursive_stmt: RETURN maybe_expr . S_COL

    S_COL  shift, and go to state 75


State 43

   54 expr1: L_PAR expr . R_PAR

    R_PAR  shift, and go to state 76


State 44

   55 expr1: L_BRK expr . R_BRK

    R_BRK  shift, and go to state 77


State 45

   20 maybe_stmts: stmt . maybe_stmts

    FOR       shift, and go to state 1
    IF        shift, and go to state 2
    PRINT     shift, and go to state 3
    RETURN    shift, and go to state 4
    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    L_BRC     shift, and go to state 7
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 19 (maybe_stmts)

    stmt                      go to state 45
    non_right_recursive_stmt  go to state 17
    if_stmt                   go to state 18
    non_dangling_if           go to state 19
    for_stmt                  go to state 20
    non_dangling_for          go to state 21
    maybe_stmts               go to state 78
    expr                      go to state 22
    lvalue                    go to state 23
    expr10                    go to state 24
    expr9                     go to state 25
    expr8                     go to state 26
    expr7                     go to state 27
    expr6                     go to state 28
    expr5                     go to state 29
    expr4                     go to state 30
    expr3                     go to state 31
    expr2                     go to state 32
    expr1                     go to state 33
    atom                      go to state 34
    func_call                 go to state 35


State 46

    6 non_right_recursive_stmt: L_BRC maybe_stmts . R_BRC

    R_BRC  shift, and go to state 79


State 47

   48 expr3: MINUS expr3 .

    $default  reduce using rule 48 (expr3)


State 48

   49 expr3: NOT expr3 .

    $default  reduce using rule 49 (expr3)


State 49

   47 expr3: PLUS expr3 .

    $default  reduce using rule 47 (expr3)


State 50

   62 func_call: IDENT L_PAR . maybe_expr_comma_list R_PAR

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 64 (maybe_expr_comma_list)

    expr                   go to state 38
    lvalue                 go to state 23
    expr10                 go to state 24
    expr9                  go to state 25
    expr8                  go to state 26
    expr7                  go to state 27
    expr6                  go to state 28
    expr5                  go to state 29
    expr4                  go to state 30
    expr3                  go to state 31
    expr2                  go to state 32
    expr1                  go to state 33
    atom                   go to state 34
    func_call              go to state 35
    maybe_expr_comma_list  go to state 80
    expr_comma_list        go to state 40


State 51

   22 lvalue: IDENT L_BRK . expr R_BRK

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    expr       go to state 81
    lvalue     go to state 23
    expr10     go to state 24
    expr9      go to state 25
    expr8      go to state 26
    expr7      go to state 27
    expr6      go to state 28
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 52

    0 $accept: program $end .

    $default  accept


State 53

    5 non_right_recursive_stmt: expr S_COL .

    $default  reduce using rule 5 (non_right_recursive_stmt)


State 54

   27 expr9: expr9 OR . expr8

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr8      go to state 82
    expr7      go to state 27
    expr6      go to state 28
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 55

   24 expr10: expr9 ASGN . expr10
   25       | expr9 ASGN . arr_lit

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 83
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr10     go to state 84
    expr9      go to state 25
    expr8      go to state 26
    expr7      go to state 27
    expr6      go to state 28
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35
    arr_lit    go to state 85


State 56

   29 expr8: expr8 AND . expr7

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr7      go to state 86
    expr6      go to state 28
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 57

   32 expr7: expr7 LT_EQ . expr6

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr6      go to state 87
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 58

   31 expr7: expr7 LT . expr6

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr6      go to state 88
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 59

   34 expr7: expr7 GT_EQ . expr6

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr6      go to state 89
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 60

   33 expr7: expr7 GT . expr6

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr6      go to state 90
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 61

   35 expr7: expr7 EQ . expr6

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr6      go to state 91
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 62

   36 expr7: expr7 NOT_EQ . expr6

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr6      go to state 92
    expr5      go to state 29
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 63

   39 expr6: expr6 MINUS . expr5

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr5      go to state 93
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 64

   38 expr6: expr6 PLUS . expr5

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr5      go to state 94
    expr4      go to state 30
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 65

   41 expr5: expr5 STAR . expr4

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr4      go to state 95
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 66

   42 expr5: expr5 SLASH . expr4

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr4      go to state 96
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 67

   43 expr5: expr5 PRCT . expr4

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr4      go to state 97
    expr3      go to state 31
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 68

   45 expr4: expr4 CARET . expr3

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    lvalue     go to state 23
    expr3      go to state 98
    expr2      go to state 32
    expr1      go to state 33
    atom       go to state 34
    func_call  go to state 35


State 69

   52 expr2: expr2 INC .

    $default  reduce using rule 52 (expr2)


State 70

   51 expr2: expr2 DEC .

    $default  reduce using rule 51 (expr2)


State 71

   13 for_stmt: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR stmt
   18 non_dangling_for: FOR L_PAR maybe_expr . S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    S_COL  shift, and go to state 99


State 72

    9 if_stmt: IF L_PAR expr . R_PAR stmt
   10        | IF L_PAR expr . R_PAR non_dangling_stmt ELSE stmt
   12 non_dangling_if: IF L_PAR expr . R_PAR non_dangling_stmt ELSE non_dangling_stmt

    R_PAR  shift, and go to state 100


State 73

   67 expr_comma_list: expr COMMA . expr_comma_list

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    expr             go to state 38
    lvalue           go to state 23
    expr10           go to state 24
    expr9            go to state 25
    expr8            go to state 26
    expr7            go to state 27
    expr6            go to state 28
    expr5            go to state 29
    expr4            go to state 30
    expr3            go to state 31
    expr2            go to state 32
    expr1            go to state 33
    atom             go to state 34
    func_call        go to state 35
    expr_comma_list  go to state 101


State 74

    7 non_right_recursive_stmt: PRINT maybe_expr_comma_list S_COL .

    $default  reduce using rule 7 (non_right_recursive_stmt)


State 75

    8 non_right_recursive_stmt: RETURN maybe_expr S_COL .

    $default  reduce using rule 8 (non_right_recursive_stmt)


State 76

   54 expr1: L_PAR expr R_PAR .

    $default  reduce using rule 54 (expr1)


State 77

   55 expr1: L_BRK expr R_BRK .

    $default  reduce using rule 55 (expr1)


State 78

   20 maybe_stmts: stmt maybe_stmts .

    $default  reduce using rule 20 (maybe_stmts)


State 79

    6 non_right_recursive_stmt: L_BRC maybe_stmts R_BRC .

    $default  reduce using rule 6 (non_right_recursive_stmt)


State 80

   62 func_call: IDENT L_PAR maybe_expr_comma_list . R_PAR

    R_PAR  shift, and go to state 102


State 81

   22 lvalue: IDENT L_BRK expr . R_BRK

    R_BRK  shift, and go to state 103


State 82

   27 expr9: expr9 OR expr8 .
   29 expr8: expr8 . AND expr7

    AND  shift, and go to state 56

    $default  reduce using rule 27 (expr9)


State 83

   22 lvalue: IDENT . L_BRK expr R_BRK
   23       | IDENT .
   62 func_call: IDENT . L_PAR maybe_expr_comma_list R_PAR
   63 arr_lit: IDENT . L_BRC maybe_expr_comma_list R_BRC

    L_PAR  shift, and go to state 50
    L_BRK  shift, and go to state 51
    L_BRC  shift, and go to state 104

    $default  reduce using rule 23 (lvalue)


State 84

   24 expr10: expr9 ASGN expr10 .

    $default  reduce using rule 24 (expr10)


State 85

   25 expr10: expr9 ASGN arr_lit .

    $default  reduce using rule 25 (expr10)


State 86

   29 expr8: expr8 AND expr7 .
   31 expr7: expr7 . LT expr6
   32      | expr7 . LT_EQ expr6
   33      | expr7 . GT expr6
   34      | expr7 . GT_EQ expr6
   35      | expr7 . EQ expr6
   36      | expr7 . NOT_EQ expr6

    LT_EQ   shift, and go to state 57
    LT      shift, and go to state 58
    GT_EQ   shift, and go to state 59
    GT      shift, and go to state 60
    EQ      shift, and go to state 61
    NOT_EQ  shift, and go to state 62

    $default  reduce using rule 29 (expr8)


State 87

   32 expr7: expr7 LT_EQ expr6 .
   38 expr6: expr6 . PLUS expr5
   39      | expr6 . MINUS expr5

    MINUS  shift, and go to state 63
    PLUS   shift, and go to state 64

    $default  reduce using rule 32 (expr7)


State 88

   31 expr7: expr7 LT expr6 .
   38 expr6: expr6 . PLUS expr5
   39      | expr6 . MINUS expr5

    MINUS  shift, and go to state 63
    PLUS   shift, and go to state 64

    $default  reduce using rule 31 (expr7)


State 89

   34 expr7: expr7 GT_EQ expr6 .
   38 expr6: expr6 . PLUS expr5
   39      | expr6 . MINUS expr5

    MINUS  shift, and go to state 63
    PLUS   shift, and go to state 64

    $default  reduce using rule 34 (expr7)


State 90

   33 expr7: expr7 GT expr6 .
   38 expr6: expr6 . PLUS expr5
   39      | expr6 . MINUS expr5

    MINUS  shift, and go to state 63
    PLUS   shift, and go to state 64

    $default  reduce using rule 33 (expr7)


State 91

   35 expr7: expr7 EQ expr6 .
   38 expr6: expr6 . PLUS expr5
   39      | expr6 . MINUS expr5

    MINUS  shift, and go to state 63
    PLUS   shift, and go to state 64

    $default  reduce using rule 35 (expr7)


State 92

   36 expr7: expr7 NOT_EQ expr6 .
   38 expr6: expr6 . PLUS expr5
   39      | expr6 . MINUS expr5

    MINUS  shift, and go to state 63
    PLUS   shift, and go to state 64

    $default  reduce using rule 36 (expr7)


State 93

   39 expr6: expr6 MINUS expr5 .
   41 expr5: expr5 . STAR expr4
   42      | expr5 . SLASH expr4
   43      | expr5 . PRCT expr4

    STAR   shift, and go to state 65
    SLASH  shift, and go to state 66
    PRCT   shift, and go to state 67

    $default  reduce using rule 39 (expr6)


State 94

   38 expr6: expr6 PLUS expr5 .
   41 expr5: expr5 . STAR expr4
   42      | expr5 . SLASH expr4
   43      | expr5 . PRCT expr4

    STAR   shift, and go to state 65
    SLASH  shift, and go to state 66
    PRCT   shift, and go to state 67

    $default  reduce using rule 38 (expr6)


State 95

   41 expr5: expr5 STAR expr4 .
   45 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 68

    $default  reduce using rule 41 (expr5)


State 96

   42 expr5: expr5 SLASH expr4 .
   45 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 68

    $default  reduce using rule 42 (expr5)


State 97

   43 expr5: expr5 PRCT expr4 .
   45 expr4: expr4 . CARET expr3

    CARET  shift, and go to state 68

    $default  reduce using rule 43 (expr5)


State 98

   45 expr4: expr4 CARET expr3 .

    $default  reduce using rule 45 (expr4)


State 99

   13 for_stmt: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR stmt
   18 non_dangling_for: FOR L_PAR maybe_expr S_COL . maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 68 (maybe_expr)

    expr        go to state 41
    lvalue      go to state 23
    expr10      go to state 24
    expr9       go to state 25
    expr8       go to state 26
    expr7       go to state 27
    expr6       go to state 28
    expr5       go to state 29
    expr4       go to state 30
    expr3       go to state 31
    expr2       go to state 32
    expr1       go to state 33
    atom        go to state 34
    func_call   go to state 35
    maybe_expr  go to state 105


State 100

    9 if_stmt: IF L_PAR expr R_PAR . stmt
   10        | IF L_PAR expr R_PAR . non_dangling_stmt ELSE stmt
   12 non_dangling_if: IF L_PAR expr R_PAR . non_dangling_stmt ELSE non_dangling_stmt

    FOR       shift, and go to state 1
    IF        shift, and go to state 2
    PRINT     shift, and go to state 3
    RETURN    shift, and go to state 4
    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    L_BRC     shift, and go to state 7
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    stmt                      go to state 106
    non_right_recursive_stmt  go to state 107
    if_stmt                   go to state 18
    non_dangling_if           go to state 108
    for_stmt                  go to state 20
    non_dangling_stmt         go to state 109
    non_dangling_for          go to state 110
    expr                      go to state 22
    lvalue                    go to state 23
    expr10                    go to state 24
    expr9                     go to state 25
    expr8                     go to state 26
    expr7                     go to state 27
    expr6                     go to state 28
    expr5                     go to state 29
    expr4                     go to state 30
    expr3                     go to state 31
    expr2                     go to state 32
    expr1                     go to state 33
    atom                      go to state 34
    func_call                 go to state 35


State 101

   67 expr_comma_list: expr COMMA expr_comma_list .

    $default  reduce using rule 67 (expr_comma_list)


State 102

   62 func_call: IDENT L_PAR maybe_expr_comma_list R_PAR .

    $default  reduce using rule 62 (func_call)


State 103

   22 lvalue: IDENT L_BRK expr R_BRK .

    $default  reduce using rule 22 (lvalue)


State 104

   63 arr_lit: IDENT L_BRC . maybe_expr_comma_list R_BRC

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 64 (maybe_expr_comma_list)

    expr                   go to state 38
    lvalue                 go to state 23
    expr10                 go to state 24
    expr9                  go to state 25
    expr8                  go to state 26
    expr7                  go to state 27
    expr6                  go to state 28
    expr5                  go to state 29
    expr4                  go to state 30
    expr3                  go to state 31
    expr2                  go to state 32
    expr1                  go to state 33
    atom                   go to state 34
    func_call              go to state 35
    maybe_expr_comma_list  go to state 111
    expr_comma_list        go to state 40


State 105

   13 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR stmt
   18 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr . S_COL maybe_expr R_PAR non_dangling_stmt

    S_COL  shift, and go to state 112


State 106

    9 if_stmt: IF L_PAR expr R_PAR stmt .

    $default  reduce using rule 9 (if_stmt)


State 107

    2 stmt: non_right_recursive_stmt .
   15 non_dangling_stmt: non_right_recursive_stmt .

    $end      reduce using rule 2 (stmt)
    $end      [reduce using rule 15 (non_dangling_stmt)]
    ELSE      reduce using rule 15 (non_dangling_stmt)
    FOR       reduce using rule 2 (stmt)
    FOR       [reduce using rule 15 (non_dangling_stmt)]
    IF        reduce using rule 2 (stmt)
    IF        [reduce using rule 15 (non_dangling_stmt)]
    PRINT     reduce using rule 2 (stmt)
    PRINT     [reduce using rule 15 (non_dangling_stmt)]
    RETURN    reduce using rule 2 (stmt)
    RETURN    [reduce using rule 15 (non_dangling_stmt)]
    L_PAR     reduce using rule 2 (stmt)
    L_PAR     [reduce using rule 15 (non_dangling_stmt)]
    L_BRK     reduce using rule 2 (stmt)
    L_BRK     [reduce using rule 15 (non_dangling_stmt)]
    L_BRC     reduce using rule 2 (stmt)
    L_BRC     [reduce using rule 15 (non_dangling_stmt)]
    R_BRC     reduce using rule 2 (stmt)
    R_BRC     [reduce using rule 15 (non_dangling_stmt)]
    MINUS     reduce using rule 2 (stmt)
    MINUS     [reduce using rule 15 (non_dangling_stmt)]
    NOT       reduce using rule 2 (stmt)
    NOT       [reduce using rule 15 (non_dangling_stmt)]
    PLUS      reduce using rule 2 (stmt)
    PLUS      [reduce using rule 15 (non_dangling_stmt)]
    IDENT     reduce using rule 2 (stmt)
    IDENT     [reduce using rule 15 (non_dangling_stmt)]
    STR_LIT   reduce using rule 2 (stmt)
    STR_LIT   [reduce using rule 15 (non_dangling_stmt)]
    INT_LIT   reduce using rule 2 (stmt)
    INT_LIT   [reduce using rule 15 (non_dangling_stmt)]
    CHAR_LIT  reduce using rule 2 (stmt)
    CHAR_LIT  [reduce using rule 15 (non_dangling_stmt)]
    $default  reduce using rule 2 (stmt)


State 108

   11 if_stmt: non_dangling_if .
   17 non_dangling_stmt: non_dangling_if .

    $end      reduce using rule 11 (if_stmt)
    $end      [reduce using rule 17 (non_dangling_stmt)]
    ELSE      reduce using rule 17 (non_dangling_stmt)
    FOR       reduce using rule 11 (if_stmt)
    FOR       [reduce using rule 17 (non_dangling_stmt)]
    IF        reduce using rule 11 (if_stmt)
    IF        [reduce using rule 17 (non_dangling_stmt)]
    PRINT     reduce using rule 11 (if_stmt)
    PRINT     [reduce using rule 17 (non_dangling_stmt)]
    RETURN    reduce using rule 11 (if_stmt)
    RETURN    [reduce using rule 17 (non_dangling_stmt)]
    L_PAR     reduce using rule 11 (if_stmt)
    L_PAR     [reduce using rule 17 (non_dangling_stmt)]
    L_BRK     reduce using rule 11 (if_stmt)
    L_BRK     [reduce using rule 17 (non_dangling_stmt)]
    L_BRC     reduce using rule 11 (if_stmt)
    L_BRC     [reduce using rule 17 (non_dangling_stmt)]
    R_BRC     reduce using rule 11 (if_stmt)
    R_BRC     [reduce using rule 17 (non_dangling_stmt)]
    MINUS     reduce using rule 11 (if_stmt)
    MINUS     [reduce using rule 17 (non_dangling_stmt)]
    NOT       reduce using rule 11 (if_stmt)
    NOT       [reduce using rule 17 (non_dangling_stmt)]
    PLUS      reduce using rule 11 (if_stmt)
    PLUS      [reduce using rule 17 (non_dangling_stmt)]
    IDENT     reduce using rule 11 (if_stmt)
    IDENT     [reduce using rule 17 (non_dangling_stmt)]
    STR_LIT   reduce using rule 11 (if_stmt)
    STR_LIT   [reduce using rule 17 (non_dangling_stmt)]
    INT_LIT   reduce using rule 11 (if_stmt)
    INT_LIT   [reduce using rule 17 (non_dangling_stmt)]
    CHAR_LIT  reduce using rule 11 (if_stmt)
    CHAR_LIT  [reduce using rule 17 (non_dangling_stmt)]
    $default  reduce using rule 11 (if_stmt)


State 109

   10 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt . ELSE stmt
   12 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt . ELSE non_dangling_stmt

    ELSE  shift, and go to state 113


State 110

   14 for_stmt: non_dangling_for .
   16 non_dangling_stmt: non_dangling_for .

    $end      reduce using rule 14 (for_stmt)
    $end      [reduce using rule 16 (non_dangling_stmt)]
    ELSE      reduce using rule 16 (non_dangling_stmt)
    FOR       reduce using rule 14 (for_stmt)
    FOR       [reduce using rule 16 (non_dangling_stmt)]
    IF        reduce using rule 14 (for_stmt)
    IF        [reduce using rule 16 (non_dangling_stmt)]
    PRINT     reduce using rule 14 (for_stmt)
    PRINT     [reduce using rule 16 (non_dangling_stmt)]
    RETURN    reduce using rule 14 (for_stmt)
    RETURN    [reduce using rule 16 (non_dangling_stmt)]
    L_PAR     reduce using rule 14 (for_stmt)
    L_PAR     [reduce using rule 16 (non_dangling_stmt)]
    L_BRK     reduce using rule 14 (for_stmt)
    L_BRK     [reduce using rule 16 (non_dangling_stmt)]
    L_BRC     reduce using rule 14 (for_stmt)
    L_BRC     [reduce using rule 16 (non_dangling_stmt)]
    R_BRC     reduce using rule 14 (for_stmt)
    R_BRC     [reduce using rule 16 (non_dangling_stmt)]
    MINUS     reduce using rule 14 (for_stmt)
    MINUS     [reduce using rule 16 (non_dangling_stmt)]
    NOT       reduce using rule 14 (for_stmt)
    NOT       [reduce using rule 16 (non_dangling_stmt)]
    PLUS      reduce using rule 14 (for_stmt)
    PLUS      [reduce using rule 16 (non_dangling_stmt)]
    IDENT     reduce using rule 14 (for_stmt)
    IDENT     [reduce using rule 16 (non_dangling_stmt)]
    STR_LIT   reduce using rule 14 (for_stmt)
    STR_LIT   [reduce using rule 16 (non_dangling_stmt)]
    INT_LIT   reduce using rule 14 (for_stmt)
    INT_LIT   [reduce using rule 16 (non_dangling_stmt)]
    CHAR_LIT  reduce using rule 14 (for_stmt)
    CHAR_LIT  [reduce using rule 16 (non_dangling_stmt)]
    $default  reduce using rule 14 (for_stmt)


State 111

   63 arr_lit: IDENT L_BRC maybe_expr_comma_list . R_BRC

    R_BRC  shift, and go to state 114


State 112

   13 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR stmt
   18 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL . maybe_expr R_PAR non_dangling_stmt

    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    $default  reduce using rule 68 (maybe_expr)

    expr        go to state 41
    lvalue      go to state 23
    expr10      go to state 24
    expr9       go to state 25
    expr8       go to state 26
    expr7       go to state 27
    expr6       go to state 28
    expr5       go to state 29
    expr4       go to state 30
    expr3       go to state 31
    expr2       go to state 32
    expr1       go to state 33
    atom        go to state 34
    func_call   go to state 35
    maybe_expr  go to state 115


State 113

   10 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE . stmt
   12 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE . non_dangling_stmt

    FOR       shift, and go to state 1
    IF        shift, and go to state 2
    PRINT     shift, and go to state 3
    RETURN    shift, and go to state 4
    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    L_BRC     shift, and go to state 7
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    stmt                      go to state 116
    non_right_recursive_stmt  go to state 107
    if_stmt                   go to state 18
    non_dangling_if           go to state 108
    for_stmt                  go to state 20
    non_dangling_stmt         go to state 117
    non_dangling_for          go to state 110
    expr                      go to state 22
    lvalue                    go to state 23
    expr10                    go to state 24
    expr9                     go to state 25
    expr8                     go to state 26
    expr7                     go to state 27
    expr6                     go to state 28
    expr5                     go to state 29
    expr4                     go to state 30
    expr3                     go to state 31
    expr2                     go to state 32
    expr1                     go to state 33
    atom                      go to state 34
    func_call                 go to state 35


State 114

   63 arr_lit: IDENT L_BRC maybe_expr_comma_list R_BRC .

    $default  reduce using rule 63 (arr_lit)


State 115

   13 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR stmt
   18 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr . R_PAR non_dangling_stmt

    R_PAR  shift, and go to state 118


State 116

   10 if_stmt: IF L_PAR expr R_PAR non_dangling_stmt ELSE stmt .

    $default  reduce using rule 10 (if_stmt)


State 117

   12 non_dangling_if: IF L_PAR expr R_PAR non_dangling_stmt ELSE non_dangling_stmt .

    $default  reduce using rule 12 (non_dangling_if)


State 118

   13 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . stmt
   18 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR . non_dangling_stmt

    FOR       shift, and go to state 1
    IF        shift, and go to state 2
    PRINT     shift, and go to state 3
    RETURN    shift, and go to state 4
    L_PAR     shift, and go to state 5
    L_BRK     shift, and go to state 6
    L_BRC     shift, and go to state 7
    MINUS     shift, and go to state 8
    NOT       shift, and go to state 9
    PLUS      shift, and go to state 10
    IDENT     shift, and go to state 11
    STR_LIT   shift, and go to state 12
    INT_LIT   shift, and go to state 13
    CHAR_LIT  shift, and go to state 14

    stmt                      go to state 119
    non_right_recursive_stmt  go to state 107
    if_stmt                   go to state 18
    non_dangling_if           go to state 108
    for_stmt                  go to state 20
    non_dangling_stmt         go to state 120
    non_dangling_for          go to state 110
    expr                      go to state 22
    lvalue                    go to state 23
    expr10                    go to state 24
    expr9                     go to state 25
    expr8                     go to state 26
    expr7                     go to state 27
    expr6                     go to state 28
    expr5                     go to state 29
    expr4                     go to state 30
    expr3                     go to state 31
    expr2                     go to state 32
    expr1                     go to state 33
    atom                      go to state 34
    func_call                 go to state 35


State 119

   13 for_stmt: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR stmt .

    $default  reduce using rule 13 (for_stmt)


State 120

   18 non_dangling_for: FOR L_PAR maybe_expr S_COL maybe_expr S_COL maybe_expr R_PAR non_dangling_stmt .

    $default  reduce using rule 18 (non_dangling_for)
